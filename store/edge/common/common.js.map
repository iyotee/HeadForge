{"version":3,"file":"common/common.js","mappings":"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","sources":["webpack://headforge/./src/utils/language-configs.ts","webpack://headforge/./src/utils/validation.ts","webpack://headforge/./src/utils/template-engine.ts"],"sourcesContent":["import { LanguageConfig } from '@/types';\n\nexport interface LanguageConfigs {\n  [key: string]: LanguageConfig;\n}\n\nexport const languageConfigs: LanguageConfigs = {\n  javascript: {\n    id: 'javascript',\n    name: 'JavaScript',\n    extension: '.js',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  typescript: {\n    id: 'typescript',\n    name: 'TypeScript',\n    extension: '.ts',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  python: {\n    id: 'python',\n    name: 'Python',\n    extension: '.py',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `\"\"\"\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n\"\"\"`,\n    templateComplete: `\"\"\"\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n\"\"\"`,\n    category: 'backend'\n  },\n  java: {\n    id: 'java',\n    name: 'Java',\n    extension: '.java',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  csharp: {\n    id: 'csharp',\n    name: 'C#',\n    extension: '.cs',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  cpp: {\n    id: 'cpp',\n    name: 'C++',\n    extension: '.cpp',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  c: {\n    id: 'c',\n    name: 'C',\n    extension: '.c',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  go: {\n    id: 'go',\n    name: 'Go',\n    extension: '.go',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  rust: {\n    id: 'rust',\n    name: 'Rust',\n    extension: '.rs',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  php: {\n    id: 'php',\n    name: 'PHP',\n    extension: '.php',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  ruby: {\n    id: 'ruby',\n    name: 'Ruby',\n    extension: '.rb',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    templateComplete: `=begin\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n=end`,\n    category: 'backend'\n  },\n  swift: {\n    id: 'swift',\n    name: 'Swift',\n    extension: '.swift',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'mobile'\n  },\n  kotlin: {\n    id: 'kotlin',\n    name: 'Kotlin',\n    extension: '.kt',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'mobile'\n  },\n  html: {\n    id: 'html',\n    name: 'HTML',\n    extension: '.html',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    commentLine: '<!--',\n    template: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    templateComplete: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    category: 'web'\n  },\n  css: {\n    id: 'css',\n    name: 'CSS',\n    extension: '.css',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/*\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  scss: {\n    id: 'scss',\n    name: 'SCSS',\n    extension: '.scss',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/*\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  jsx: {\n    id: 'jsx',\n    name: 'JSX',\n    extension: '.jsx',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  tsx: {\n    id: 'tsx',\n    name: 'TSX',\n    extension: '.tsx',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  sql: {\n    id: 'sql',\n    name: 'SQL',\n    extension: '.sql',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '--',\n    template: `/*\n-- @author {{author}}\n-- @fileName {{fileName}}\n-- @projectName {{project}}\n-- @version {{version}}\n-- @description {{description}}\n-- @created {{creationDate}}\n-- @updated {{lastUpdated}}\n-- @license {{license}}\n-- @status {{status}}\n-- @usage {{usage}}\n-- @dependencies {{dependencies}}\n-- @notes {{notes}}\n-- @todo {{todo}}\n*/`,\n    category: 'database'\n  },\n  bash: {\n    id: 'bash',\n    name: 'Bash',\n    extension: '.sh',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    templateComplete: `#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    category: 'devops'\n  },\n  powershell: {\n    id: 'powershell',\n    name: 'PowerShell',\n    extension: '.ps1',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    templateComplete: `# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    category: 'devops'\n  },\n  yaml: {\n    id: 'yaml',\n    name: 'YAML',\n    extension: '.yml',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    templateComplete: `# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    category: 'devops'\n  },\n  json: {\n    id: 'json',\n    name: 'JSON',\n    extension: '.json',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `{\n  \"_header\": {\n    \"author\": \"{{author}}\",\n    \"fileName\": \"{{fileName}}\",\n    \"projectName\": \"{{project}}\",\n    \"version\": \"{{version}}\",\n    \"description\": \"{{description}}\",\n    \"created\": \"{{creationDate}}\",\n    \"updated\": \"{{lastUpdated}}\",\n    \"license\": \"{{license}}\",\n    \"status\": \"{{status}}\",\n    \"usage\": \"{{usage}}\",\n    \"dependencies\": \"{{dependencies}}\",\n    \"notes\": \"{{notes}}\",\n    \"todo\": \"{{todo}}\"\n  }\n}`,\n    category: 'other'\n  },\n  xml: {\n    id: 'xml',\n    name: 'XML',\n    extension: '.xml',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    commentLine: '<!--',\n    template: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    templateComplete: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    category: 'other'\n  },\n  markdown: {\n    id: 'markdown',\n    name: 'Markdown',\n    extension: '.md',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    commentLine: '<!--',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    templateComplete: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    category: 'other'\n  }\n};\n\nexport function getLanguageById(id: string): LanguageConfig | null {\n  return languageConfigs[id] || null;\n}\n\nexport function getAllLanguages(): LanguageConfig[] {\n  return Object.values(languageConfigs);\n}\n\nexport function getLanguageByExtension(extension: string): LanguageConfig | null {\n  return Object.values(languageConfigs).find(lang => lang.extension === extension) || null;\n}\n\nexport function searchLanguages(query: string): LanguageConfig[] {\n  const lowerQuery = query.toLowerCase();\n  return Object.values(languageConfigs).filter(lang => \n    lang.name.toLowerCase().includes(lowerQuery) ||\n    lang.id.toLowerCase().includes(lowerQuery) ||\n    lang.extension.toLowerCase().includes(lowerQuery)\n  );\n}","import { HeaderData, ValidationResult } from '../types';\nimport { VALIDATION_LIMITS } from './constants';\n\nexport const ValidationUtils = {\n  validateHeaderData,\n  isValidVersion,\n  isValidDate,\n  isValidFileName,\n  isValidUrl,\n  isValidEmail,\n  sanitizeInput,\n  validateFormField,\n  validateLanguage,\n  validateLicense,\n  validateStatus,\n  getValidationSummary,\n  formatValidationErrors,\n  formatValidationWarnings\n};\n\nexport function validateHeaderData(data: HeaderData): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Required field validation\n  if (!data.fileName || data.fileName.trim() === '') {\n    errors.push('File name is required');\n  }\n\n  if (!data.project || data.project.trim() === '') {\n    errors.push('Project name is required');\n  }\n\n  if (!data.author || data.author.trim() === '') {\n    errors.push('Author is required');\n  }\n\n  if (!data.version || data.version.trim() === '') {\n    errors.push('Version is required');\n  }\n\n  if (!data.language || data.language.trim() === '') {\n    errors.push('Language is required');\n  }\n\n  if (!data.license || data.license.trim() === '') {\n    errors.push('License is required');\n  }\n\n  if (!data.status || data.status.trim() === '') {\n    errors.push('Status is required');\n  }\n\n\n  // Length validation\n  if (data.fileName && data.fileName.length > VALIDATION_LIMITS.MAX_FILENAME_LENGTH) {\n    errors.push(`File name must be less than ${VALIDATION_LIMITS.MAX_FILENAME_LENGTH} characters`);\n  }\n\n  if (data.description && data.description.length > VALIDATION_LIMITS.MAX_DESCRIPTION_LENGTH) {\n    errors.push(`Description must be less than ${VALIDATION_LIMITS.MAX_DESCRIPTION_LENGTH} characters`);\n  }\n\n  if (data.usage && data.usage.length > VALIDATION_LIMITS.MAX_USAGE_LENGTH) {\n    errors.push(`Usage must be less than ${VALIDATION_LIMITS.MAX_USAGE_LENGTH} characters`);\n  }\n\n  if (data.notes && data.notes.length > VALIDATION_LIMITS.MAX_NOTES_LENGTH) {\n    errors.push(`Notes must be less than ${VALIDATION_LIMITS.MAX_NOTES_LENGTH} characters`);\n  }\n\n  if (data.todo && data.todo.length > VALIDATION_LIMITS.MAX_TODO_LENGTH) {\n    errors.push(`TODO must be less than ${VALIDATION_LIMITS.MAX_TODO_LENGTH} characters`);\n  }\n\n  if (data.dependencies && data.dependencies.length > VALIDATION_LIMITS.MAX_DEPENDENCIES_LENGTH) {\n    errors.push(`Dependencies must be less than ${VALIDATION_LIMITS.MAX_DEPENDENCIES_LENGTH} characters`);\n  }\n\n  // Format validation\n  if (data.version && !isValidVersion(data.version)) {\n    errors.push('Version must follow semantic versioning (e.g., 1.0.0)');\n  }\n\n  if (data.creationDate && !isValidDate(data.creationDate)) {\n    errors.push('Creation date must be in YYYY-MM-DD format');\n  }\n\n  if (data.lastUpdated && !isValidDate(data.lastUpdated)) {\n    errors.push('Last updated date must be in YYYY-MM-DD format');\n  }\n\n  // File name validation\n  if (data.fileName && !isValidFileName(data.fileName)) {\n    errors.push('File name contains invalid characters');\n  }\n\n  // Warning validations\n  if (data.fileName && !data.fileName.includes('.')) {\n    warnings.push('File name should include an extension');\n  }\n\n  if (data.version && data.version.startsWith('0.')) {\n    warnings.push('Version 0.x indicates development version');\n  }\n\n  if (data.status === 'Deprecated') {\n    warnings.push('Status is set to deprecated');\n  }\n\n\n  if (data.description && data.description.length < 10) {\n    warnings.push('Description is very short');\n  }\n\n  if (data.usage && data.usage.length < 10) {\n    warnings.push('Usage instructions are very short');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\nexport function isValidVersion(version: string): boolean {\n  // Semantic versioning pattern: major.minor.patch[-prerelease][+build]\n  const versionPattern = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n  return versionPattern.test(version);\n}\n\nexport function isValidDate(dateString: string): boolean {\n  // Check if date is in YYYY-MM-DD format\n  const datePattern = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!datePattern.test(dateString)) {\n    return false;\n  }\n\n  // Check if date is valid\n  const date = new Date(dateString);\n  return date instanceof Date && !isNaN(date.getTime());\n}\n\nexport function isValidFileName(fileName: string): boolean {\n  // Check for invalid characters in file names\n  const invalidChars = /[<>:\"/\\\\|?*]/;\n  return !invalidChars.test(fileName);\n}\n\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isValidEmail(email: string): boolean {\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailPattern.test(email);\n}\n\nexport function sanitizeInput(input: string): string {\n  // Remove potentially dangerous characters\n  return input\n    .replace(/[<>]/g, '') // Remove < and >\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\n    .replace(/on\\w+=/gi, '') // Remove event handlers\n    .trim();\n}\n\nexport function validateFormField(\n  value: string,\n  fieldName: string,\n  required: boolean = false,\n  minLength: number = 0,\n  maxLength: number = Infinity,\n  pattern?: RegExp\n): { isValid: boolean; error?: string } {\n  // Required validation\n  if (required && (!value || value.trim() === '')) {\n    return { isValid: false, error: `${fieldName} is required` };\n  }\n\n  // Skip other validations if value is empty and not required\n  if (!value || value.trim() === '') {\n    return { isValid: true };\n  }\n\n  // Length validation\n  if (value.length < minLength) {\n    return { isValid: false, error: `${fieldName} must be at least ${minLength} characters` };\n  }\n\n  if (value.length > maxLength) {\n    return { isValid: false, error: `${fieldName} must be less than ${maxLength} characters` };\n  }\n\n  // Pattern validation\n  if (pattern && !pattern.test(value)) {\n    return { isValid: false, error: `${fieldName} format is invalid` };\n  }\n\n  return { isValid: true };\n}\n\nexport function validateLanguage(language: string): boolean {\n  const validLanguages = [\n    'javascript', 'typescript', 'html', 'css', 'scss', 'jsx', 'tsx', 'vue',\n    'python', 'java', 'csharp', 'cpp', 'go', 'rust', 'php', 'ruby',\n    'sql', 'graphql', 'dockerfile', 'yaml', 'json', 'bash', 'powershell',\n    'r', 'lua', 'perl', 'haskell'\n  ];\n  \n  return validLanguages.includes(language);\n}\n\nexport function validateLicense(license: string): boolean {\n  const validLicenses = [\n    'MIT', 'GPL-3.0', 'Apache-2.0', 'BSD-3-Clause', 'ISC', 'Unlicense', 'Custom'\n  ];\n  \n  return validLicenses.includes(license);\n}\n\nexport function validateStatus(status: string): boolean {\n  const validStatuses = [\n    'Development', 'Stable', 'Beta', 'Deprecated', 'Maintenance'\n  ];\n  \n  return validStatuses.includes(status);\n}\n\n\nexport function getValidationSummary(result: ValidationResult): string {\n  if (result.isValid && result.warnings.length === 0) {\n    return 'All validations passed';\n  }\n  \n  const parts: string[] = [];\n  \n  if (result.errors.length > 0) {\n    parts.push(`${result.errors.length} error(s)`);\n  }\n  \n  if (result.warnings.length > 0) {\n    parts.push(`${result.warnings.length} warning(s)`);\n  }\n  \n  return parts.join(', ');\n}\n\nexport function formatValidationErrors(errors: string[]): string {\n  return errors.map((error, index) => `${index + 1}. ${error}`).join('\\n');\n}\n\nexport function formatValidationWarnings(warnings: string[]): string {\n  return warnings.map((warning, index) => `${index + 1}. ${warning}`).join('\\n');\n}\n\n\n\n\n","import { HeaderData, LanguageConfig, TemplateVariables } from '../types';\n\n\nexport const templateEngine = {\n  generateHeader,\n  formatTemplate,\n  validateTemplate,\n  extractVariables\n};\n\nexport function generateHeader(data: HeaderData, languageConfig: LanguageConfig): string {\n  // Create template variables\n  const variables: TemplateVariables = {\n    fileName: data.fileName,\n    project: data.project,\n    author: data.author,\n    creationDate: data.creationDate,\n    lastUpdated: data.lastUpdated,\n    version: data.version,\n    description: data.description,\n    dependencies: data.dependencies,\n    license: data.license,\n    status: data.status,\n    language: data.language,\n    usage: data.usage,\n    notes: data.notes,\n    todo: data.todo,\n    commentLine: languageConfig.commentLine\n  };\n\n  // Choose template based on header type\n  let template = languageConfig.template;\n  if (data.headerType === 'complete') {\n    if (languageConfig.templateComplete) {\n      template = languageConfig.templateComplete;\n    } else {\n      // Generate a complete template if none exists\n      template = generateCompleteTemplate(languageConfig);\n    }\n  }\n  \n  // Replace template variables\n  let header = template;\n  \n  // Replace all {{variable}} placeholders\n  Object.entries(variables).forEach(([key, value]) => {\n    const placeholder = `{{${key}}}`;\n    header = header.replace(new RegExp(placeholder, 'g'), value || '');\n  });\n\n  // Remove lines with empty values (except commentLine)\n  header = removeEmptyLines(header);\n\n  // Clean up empty lines and format\n  header = formatHeader(header, languageConfig);\n\n  return header;\n}\n\nfunction removeEmptyLines(header: string): string {\n  const lines = header.split('\\n');\n  const filteredLines = lines.filter(line => {\n    const trimmedLine = line.trim();\n    // Keep the line if it's not empty and doesn't end with just a colon (empty field)\n    // Also remove lines that end with just a field name without value (like \"@dependencies \")\n    return trimmedLine !== '' && \n           !trimmedLine.match(/:\\s*$/) && \n           !trimmedLine.match(/@\\w+\\s*$/);\n  });\n  \n  return filteredLines.join('\\n');\n}\n\nfunction formatHeader(header: string, languageConfig: LanguageConfig): string {\n  const lines = header.split('\\n');\n  const formattedLines: string[] = [];\n  \n  let inCommentBlock = false;\n  let commentStartFound = false;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!line) continue;\n    const trimmedLine = line.trim();\n    \n    // Check if we're starting a comment block\n    if (trimmedLine.includes(languageConfig.commentStart) && !commentStartFound) {\n      inCommentBlock = true;\n      commentStartFound = true;\n    }\n    \n    // Check if we're ending a comment block\n    if (trimmedLine.includes(languageConfig.commentEnd || '') && inCommentBlock) {\n      inCommentBlock = false;\n    }\n    \n    // Skip empty lines in comment blocks\n    if (inCommentBlock && trimmedLine === '') {\n      continue;\n    }\n    \n    // Add the line\n    formattedLines.push(line);\n  }\n  \n  return formattedLines.join('\\n');\n}\n\nexport function validateTemplate(template: string): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n  \n  // Check for balanced comment markers\n  const commentStartCount = (template.match(/\\{\\{commentStart\\}\\}/g) || []).length;\n  const commentEndCount = (template.match(/\\{\\{commentEnd\\}\\}/g) || []).length;\n  \n  if (commentStartCount !== commentEndCount) {\n    errors.push('Unbalanced comment markers');\n  }\n  \n  // Check for required variables\n  const requiredVariables = [\n    'fileName',\n    'project',\n    'author',\n    'version'\n  ];\n  \n  requiredVariables.forEach(variable => {\n    if (!template.includes(`{{${variable}}}`)) {\n      errors.push(`Missing required variable: ${variable}`);\n    }\n  });\n  \n  // Check for invalid variables\n  const validVariables = [\n    'fileName', 'project', 'author', 'creationDate', 'lastUpdated',\n    'version', 'description', 'dependencies', 'license', 'status',\n    'language', 'usage', 'notes', 'todo'\n  ];\n  \n  const variableMatches = template.match(/\\{\\{([^}]+)\\}\\}/g) || [];\n  variableMatches.forEach(match => {\n    const variable = match.replace(/\\{\\{|\\}\\}/g, '');\n    if (!validVariables.includes(variable)) {\n      errors.push(`Invalid variable: ${variable}`);\n    }\n  });\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n\nexport function createCustomTemplate(\n  languageConfig: LanguageConfig,\n  variables: string[]\n): string {\n  let template = '';\n  \n  // Start comment block\n  if (languageConfig.commentStart) {\n    template += languageConfig.commentStart + '\\n';\n  }\n  \n  // Add variables\n  variables.forEach(variable => {\n    if (languageConfig.commentLine) {\n      template += `${languageConfig.commentLine} {{${variable}}}\\n`;\n    }\n  });\n  \n  // End comment block\n  if (languageConfig.commentEnd) {\n    template += languageConfig.commentEnd;\n  }\n  \n  return template;\n}\n\nexport function formatCommentBlock(\n  content: string,\n  languageConfig: LanguageConfig,\n  maxWidth: number = 80\n): string {\n  const lines = content.split('\\n');\n  const formattedLines: string[] = [];\n  \n  // Start comment block\n  if (languageConfig.commentStart) {\n    formattedLines.push(languageConfig.commentStart);\n  }\n  \n  // Format each line\n  lines.forEach(line => {\n    if (line.trim() === '') {\n      formattedLines.push('');\n      return;\n    }\n    \n    // Wrap long lines\n    const wrappedLines = wrapLine(line, maxWidth);\n    wrappedLines.forEach(wrappedLine => {\n      if (languageConfig.commentLine) {\n        formattedLines.push(`${languageConfig.commentLine} ${wrappedLine}`);\n      } else {\n        formattedLines.push(wrappedLine);\n      }\n    });\n  });\n  \n  // End comment block\n  if (languageConfig.commentEnd) {\n    formattedLines.push(languageConfig.commentEnd);\n  }\n  \n  return formattedLines.join('\\n');\n}\n\nfunction wrapLine(line: string, maxWidth: number): string[] {\n  if (line.length <= maxWidth) {\n    return [line];\n  }\n  \n  const words = line.split(' ');\n  const wrappedLines: string[] = [];\n  let currentLine = '';\n  \n  words.forEach(word => {\n    if (currentLine.length + word.length + 1 <= maxWidth) {\n      currentLine += (currentLine ? ' ' : '') + word;\n    } else {\n      if (currentLine) {\n        wrappedLines.push(currentLine);\n      }\n      currentLine = word;\n    }\n  });\n  \n  if (currentLine) {\n    wrappedLines.push(currentLine);\n  }\n  \n  return wrappedLines;\n}\n\nexport function generateHeaderPreview(\n  data: HeaderData,\n  languageConfig: LanguageConfig,\n  maxLines: number = 20\n): string {\n  const fullHeader = generateHeader(data, languageConfig);\n  const lines = fullHeader.split('\\n');\n  \n  if (lines.length <= maxLines) {\n    return fullHeader;\n  }\n  \n  const previewLines = lines.slice(0, maxLines);\n  previewLines.push('... (truncated)');\n  \n  return previewLines.join('\\n');\n}\n\nexport function getHeaderStatistics(header: string): {\n  lineCount: number;\n  characterCount: number;\n  wordCount: number;\n  commentLineCount: number;\n} {\n  const lines = header.split('\\n');\n  const lineCount = lines.length;\n  const characterCount = header.length;\n  const wordCount = header.split(/\\s+/).filter(word => word.length > 0).length;\n  const commentLineCount = lines.filter(line => \n    line.trim().startsWith('//') || \n    line.trim().startsWith('#') || \n    line.trim().startsWith('--') ||\n    line.trim().startsWith('/*') ||\n    line.trim().startsWith('<!--')\n  ).length;\n  \n  return {\n    lineCount,\n    characterCount,\n    wordCount,\n    commentLineCount\n  };\n}\n\nexport function formatTemplate(template: string, variables: Record<string, string>): string {\n  let formatted = template;\n  \n  Object.entries(variables).forEach(([key, value]) => {\n    const placeholder = `{{${key}}}`;\n    formatted = formatted.replace(new RegExp(placeholder, 'g'), value ?? '');\n  });\n  \n  return formatted;\n}\n\nexport function extractVariables(template: string): string[] {\n  const regex = /\\{\\{(\\w+)\\}\\}/g;\n  const variables: string[] = [];\n  let match;\n  \n  while ((match = regex.exec(template)) !== null) {\n    if (match[1] && !variables.includes(match[1])) {\n      variables.push(match[1]);\n    }\n  }\n  \n  return variables;\n}\n\nfunction generateCompleteTemplate(languageConfig: LanguageConfig): string {\n  const { commentStart, commentEnd, commentLine } = languageConfig;\n  \n  // Determine the border character and format based on comment style\n  let borderChar = '*';\n  let topBorder = '';\n  let bottomBorder = '';\n  \n  if (commentLine === '#') {\n    // Python style\n    borderChar = '#';\n    topBorder = `\"\"\"${borderChar.repeat(60)}\"\"\"`;\n    bottomBorder = `\"\"\"${borderChar.repeat(60)}\"\"\"`;\n  } else if (commentLine === '--') {\n    // SQL style\n    borderChar = '-';\n    topBorder = `/*${borderChar.repeat(60)}*/`;\n    bottomBorder = `/*${borderChar.repeat(60)}*/`;\n  } else if (commentLine === '<!--') {\n    // HTML style\n    borderChar = '-';\n    topBorder = `<!${borderChar.repeat(60)}>`;\n    bottomBorder = `<!${borderChar.repeat(60)}>`;\n  } else {\n    // Default C/Java/JavaScript style\n    borderChar = '*';\n    topBorder = `/*${borderChar.repeat(60)}*/`;\n    bottomBorder = `/*${borderChar.repeat(60)}*/`;\n  }\n  \n  let template = '';\n  \n  // Add decorative header with borders\n  template += `${topBorder}\\n`;\n  template += `${commentLine} @author {{author}}\\n`;\n  template += `${commentLine} @fileName {{fileName}}\\n`;\n  template += `${commentLine} @projectName {{project}}\\n`;\n  template += `${commentLine} @version {{version}}\\n`;\n  template += `${commentLine} @description {{description}}\\n`;\n  template += `${commentLine} @created {{creationDate}}\\n`;\n  template += `${commentLine} @updated {{lastUpdated}}\\n`;\n  template += `${commentLine} @license {{license}}\\n`;\n  template += `${commentLine} @status {{status}}\\n`;\n  template += `${commentLine} @usage {{usage}}\\n`;\n  template += `${commentLine} @dependencies {{dependencies}}\\n`;\n  template += `${commentLine} @notes {{notes}}\\n`;\n  template += `${commentLine} @todo {{todo}}\\n`;\n  template += `${bottomBorder}`;\n  \n  return template;\n}"],"names":["languageConfigs","javascript","id","name","extension","commentStart","commentEnd","commentLine","template","category","typescript","python","templateComplete","java","csharp","cpp","c","go","rust","php","ruby","swift","kotlin","html","css","scss","jsx","tsx","sql","bash","powershell","yaml","json","xml","markdown","getLanguageById","ValidationUtils","validateHeaderData","data","errors","warnings","fileName","trim","push","project","author","version","language","license","status","length","MAX_FILENAME_LENGTH","description","MAX_DESCRIPTION_LENGTH","usage","MAX_USAGE_LENGTH","notes","MAX_NOTES_LENGTH","todo","MAX_TODO_LENGTH","dependencies","MAX_DEPENDENCIES_LENGTH","isValidVersion","creationDate","isValidDate","lastUpdated","isValidFileName","includes","startsWith","isValid","isValidUrl","url","URL","isValidEmail","email","test","sanitizeInput","input","replace","validateFormField","value","fieldName","required","minLength","maxLength","Infinity","pattern","error","validateLanguage","validateLicense","validateStatus","getValidationSummary","result","parts","join","formatValidationErrors","map","index","formatValidationWarnings","warning","dateString","date","Date","isNaN","getTime","templateEngine","generateHeader","formatTemplate","variables","formatted","Object","entries","forEach","key","placeholder","RegExp","validateTemplate","commentStartCount","match","commentEndCount","variable","validVariables","extractVariables","regex","exec","languageConfig","headerType","borderChar","topBorder","bottomBorder","repeat","generateCompleteTemplate","header","lines","split","filter","line","trimmedLine","removeEmptyLines","formattedLines","inCommentBlock","commentStartFound","i","formatHeader"],"sourceRoot":""}