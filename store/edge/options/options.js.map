{"version":3,"file":"options/options.js","mappings":"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","sources":["webpack://headforge/./src/utils/language-configs.ts","webpack://headforge/./src/utils/constants.ts","webpack://headforge/./src/options/pages/general.ts","webpack://headforge/./src/options/pages/appearance.ts","webpack://headforge/./src/options/pages/templates.ts","webpack://headforge/./src/options/pages/advanced.ts","webpack://headforge/./src/options/options.ts"],"sourcesContent":["import { LanguageConfig } from '@/types';\n\nexport interface LanguageConfigs {\n  [key: string]: LanguageConfig;\n}\n\nexport const languageConfigs: LanguageConfigs = {\n  javascript: {\n    id: 'javascript',\n    name: 'JavaScript',\n    extension: '.js',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  typescript: {\n    id: 'typescript',\n    name: 'TypeScript',\n    extension: '.ts',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  python: {\n    id: 'python',\n    name: 'Python',\n    extension: '.py',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `\"\"\"\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n\"\"\"`,\n    templateComplete: `\"\"\"\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n\"\"\"`,\n    category: 'backend'\n  },\n  java: {\n    id: 'java',\n    name: 'Java',\n    extension: '.java',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  csharp: {\n    id: 'csharp',\n    name: 'C#',\n    extension: '.cs',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  cpp: {\n    id: 'cpp',\n    name: 'C++',\n    extension: '.cpp',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  c: {\n    id: 'c',\n    name: 'C',\n    extension: '.c',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  go: {\n    id: 'go',\n    name: 'Go',\n    extension: '.go',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  rust: {\n    id: 'rust',\n    name: 'Rust',\n    extension: '.rs',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  php: {\n    id: 'php',\n    name: 'PHP',\n    extension: '.php',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'backend'\n  },\n  ruby: {\n    id: 'ruby',\n    name: 'Ruby',\n    extension: '.rb',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    templateComplete: `=begin\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n=end`,\n    category: 'backend'\n  },\n  swift: {\n    id: 'swift',\n    name: 'Swift',\n    extension: '.swift',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'mobile'\n  },\n  kotlin: {\n    id: 'kotlin',\n    name: 'Kotlin',\n    extension: '.kt',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'mobile'\n  },\n  html: {\n    id: 'html',\n    name: 'HTML',\n    extension: '.html',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    commentLine: '<!--',\n    template: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    templateComplete: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    category: 'web'\n  },\n  css: {\n    id: 'css',\n    name: 'CSS',\n    extension: '.css',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/*\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  scss: {\n    id: 'scss',\n    name: 'SCSS',\n    extension: '.scss',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/*\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  jsx: {\n    id: 'jsx',\n    name: 'JSX',\n    extension: '.jsx',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  tsx: {\n    id: 'tsx',\n    name: 'TSX',\n    extension: '.tsx',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    category: 'web'\n  },\n  sql: {\n    id: 'sql',\n    name: 'SQL',\n    extension: '.sql',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '--',\n    template: `/*\n-- @author {{author}}\n-- @fileName {{fileName}}\n-- @projectName {{project}}\n-- @version {{version}}\n-- @description {{description}}\n-- @created {{creationDate}}\n-- @updated {{lastUpdated}}\n-- @license {{license}}\n-- @status {{status}}\n-- @usage {{usage}}\n-- @dependencies {{dependencies}}\n-- @notes {{notes}}\n-- @todo {{todo}}\n*/`,\n    category: 'database'\n  },\n  bash: {\n    id: 'bash',\n    name: 'Bash',\n    extension: '.sh',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    templateComplete: `#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    category: 'devops'\n  },\n  powershell: {\n    id: 'powershell',\n    name: 'PowerShell',\n    extension: '.ps1',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    templateComplete: `# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    category: 'devops'\n  },\n  yaml: {\n    id: 'yaml',\n    name: 'YAML',\n    extension: '.yml',\n    commentStart: '#',\n    commentEnd: '',\n    commentLine: '#',\n    template: `# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    templateComplete: `# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}`,\n    category: 'devops'\n  },\n  json: {\n    id: 'json',\n    name: 'JSON',\n    extension: '.json',\n    commentStart: '/*',\n    commentEnd: '*/',\n    commentLine: '*',\n    template: `{\n  \"_header\": {\n    \"author\": \"{{author}}\",\n    \"fileName\": \"{{fileName}}\",\n    \"projectName\": \"{{project}}\",\n    \"version\": \"{{version}}\",\n    \"description\": \"{{description}}\",\n    \"created\": \"{{creationDate}}\",\n    \"updated\": \"{{lastUpdated}}\",\n    \"license\": \"{{license}}\",\n    \"status\": \"{{status}}\",\n    \"usage\": \"{{usage}}\",\n    \"dependencies\": \"{{dependencies}}\",\n    \"notes\": \"{{notes}}\",\n    \"todo\": \"{{todo}}\"\n  }\n}`,\n    category: 'other'\n  },\n  xml: {\n    id: 'xml',\n    name: 'XML',\n    extension: '.xml',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    commentLine: '<!--',\n    template: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    templateComplete: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    category: 'other'\n  },\n  markdown: {\n    id: 'markdown',\n    name: 'Markdown',\n    extension: '.md',\n    commentStart: '<!--',\n    commentEnd: '-->',\n    commentLine: '<!--',\n    template: `/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */`,\n    templateComplete: `<!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n-->`,\n    category: 'other'\n  }\n};\n\nexport function getLanguageById(id: string): LanguageConfig | null {\n  return languageConfigs[id] || null;\n}\n\nexport function getAllLanguages(): LanguageConfig[] {\n  return Object.values(languageConfigs);\n}\n\nexport function getLanguageByExtension(extension: string): LanguageConfig | null {\n  return Object.values(languageConfigs).find(lang => lang.extension === extension) || null;\n}\n\nexport function searchLanguages(query: string): LanguageConfig[] {\n  const lowerQuery = query.toLowerCase();\n  return Object.values(languageConfigs).filter(lang => \n    lang.name.toLowerCase().includes(lowerQuery) ||\n    lang.id.toLowerCase().includes(lowerQuery) ||\n    lang.extension.toLowerCase().includes(lowerQuery)\n  );\n}","export const EXTENSION_NAME = 'HeadForge';\nexport const EXTENSION_VERSION = '1.0.0';\nexport const EXTENSION_AUTHOR = 'Satoshiba';\n\n// Storage keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'headforge_user_preferences',\n  LAST_HEADER_DATA: 'headforge_last_header_data',\n  TEMPLATE_CUSTOMIZATIONS: 'headforge_template_customizations',\n  EXPORT_HISTORY: 'headforge_export_history',\n  THEME_SETTINGS: 'headforge_theme_settings'\n} as const;\n\n// Default values\nexport const DEFAULT_VALUES = {\n  AUTHOR: 'Satoshiba',\n  PROJECT: 'SYNCLY - YouTube PVR Extension',\n  VERSION: '1.0.0',\n  LICENSE: 'MIT',\n  STATUS: 'Development',\n  PLATFORM: ['Chrome', 'Firefox', 'Edge', 'Brave'],\n  LANGUAGE: 'javascript',\n  THEME: 'light' as const,\n  EXPORT_FORMAT: 'clipboard' as const\n} as const;\n\n// License options\nexport const LICENSE_OPTIONS = [\n  { value: 'MIT', label: 'MIT License' },\n  { value: 'GPL-3.0', label: 'GNU General Public License v3.0' },\n  { value: 'Apache-2.0', label: 'Apache License 2.0' },\n  { value: 'BSD-3-Clause', label: 'BSD 3-Clause License' },\n  { value: 'ISC', label: 'ISC License' },\n  { value: 'Unlicense', label: 'The Unlicense' },\n  { value: 'Custom', label: 'Custom License' }\n] as const;\n\n// Status options\nexport const STATUS_OPTIONS = [\n  { value: 'Development', label: 'Development' },\n  { value: 'Stable', label: 'Stable' },\n  { value: 'Beta', label: 'Beta' },\n  { value: 'Deprecated', label: 'Deprecated' },\n  { value: 'Maintenance', label: 'Maintenance' }\n] as const;\n\n// Platform options\nexport const PLATFORM_OPTIONS = [\n  { value: 'Chrome', label: 'Chrome' },\n  { value: 'Firefox', label: 'Firefox' },\n  { value: 'Edge', label: 'Edge' },\n  { value: 'Brave', label: 'Brave' }\n] as const;\n\n\n// Export format options\nexport const EXPORT_FORMAT_OPTIONS = [\n  { value: 'clipboard', label: 'Copy to Clipboard' },\n  { value: 'file', label: 'Save as File' },\n  { value: 'insert', label: 'Insert into Editor' }\n] as const;\n\n// UI Constants\nexport const UI_CONSTANTS = {\n  POPUP_WIDTH: 400,\n  POPUP_HEIGHT: 600,\n  MAX_PREVIEW_LINES: 20,\n  ANIMATION_DURATION: 300,\n  DEBOUNCE_DELAY: 500\n} as const;\n\n// Validation limits\nexport const VALIDATION_LIMITS = {\n  MAX_FILENAME_LENGTH: 255,\n  MAX_DESCRIPTION_LENGTH: 1000,\n  MAX_USAGE_LENGTH: 2000,\n  MAX_NOTES_LENGTH: 1000,\n  MAX_TODO_LENGTH: 1000,\n  MAX_DEPENDENCIES_LENGTH: 500\n} as const;\n\n// File extensions mapping\nexport const FILE_EXTENSIONS = {\n  javascript: '.js',\n  typescript: '.ts',\n  html: '.html',\n  css: '.css',\n  scss: '.scss',\n  jsx: '.jsx',\n  tsx: '.tsx',\n  vue: '.vue',\n  python: '.py',\n  java: '.java',\n  csharp: '.cs',\n  cpp: '.cpp',\n  c: '.c',\n  go: '.go',\n  rust: '.rs',\n  php: '.php',\n  ruby: '.rb',\n  nodejs: '.js',\n  kotlin: '.kt',\n  swift: '.swift',\n  sql: '.sql',\n  graphql: '.graphql',\n  dockerfile: 'Dockerfile',\n  yaml: '.yml',\n  json: '.json',\n  bash: '.sh',\n  powershell: '.ps1',\n  r: '.r',\n  lua: '.lua',\n  perl: '.pl',\n  haskell: '.hs'\n} as const;\n\n// Message types for communication between components\nexport const MESSAGE_TYPES = {\n  GENERATE_HEADER: 'GENERATE_HEADER',\n  EXPORT_HEADER: 'EXPORT_HEADER',\n  SAVE_PREFERENCES: 'SAVE_PREFERENCES',\n  LOAD_PREFERENCES: 'LOAD_PREFERENCES',\n  UPDATE_THEME: 'UPDATE_THEME',\n  VALIDATE_DATA: 'VALIDATE_DATA',\n  GET_LANGUAGES: 'GET_LANGUAGES',\n  GET_TEMPLATE: 'GET_TEMPLATE'\n} as const;\n\n// Error messages\nexport const ERROR_MESSAGES = {\n  GENERIC_ERROR: 'An unexpected error occurred',\n  VALIDATION_ERROR: 'Please check your input and try again',\n  EXPORT_ERROR: 'Failed to export header',\n  SAVE_ERROR: 'Failed to save preferences',\n  LOAD_ERROR: 'Failed to load preferences',\n  NETWORK_ERROR: 'Network error occurred',\n  PERMISSION_ERROR: 'Permission denied',\n  STORAGE_ERROR: 'Storage error occurred'\n} as const;\n\n// Success messages\nexport const SUCCESS_MESSAGES = {\n  HEADER_GENERATED: 'Header generated successfully',\n  HEADER_COPIED: 'Header copied to clipboard',\n  HEADER_SAVED: 'Header saved successfully',\n  PREFERENCES_SAVED: 'Preferences saved successfully',\n  EXPORT_SUCCESS: 'Export completed successfully'\n} as const;\n\n// CSS class names\nexport const CSS_CLASSES = {\n  THEME_LIGHT: 'theme-light',\n  THEME_DARK: 'theme-dark',\n  // THEME_AUTO removed - only light and dark themes now\n  ANIMATION_FADE_IN: 'fade-in',\n  ANIMATION_SLIDE_UP: 'slide-up',\n  ANIMATION_BOUNCE: 'bounce',\n  LOADING: 'loading',\n  ERROR: 'error',\n  SUCCESS: 'success',\n  WARNING: 'warning'\n} as const;\n\n// Keyboard shortcuts\nexport const KEYBOARD_SHORTCUTS = {\n  GENERATE: 'Ctrl+Enter',\n  COPY: 'Ctrl+C',\n  SAVE: 'Ctrl+S',\n  NEW: 'Ctrl+N',\n  PREVIEW: 'Ctrl+P'\n} as const;\n\n// API endpoints (for future use)\nexport const API_ENDPOINTS = {\n  TEMPLATES: '/api/templates',\n  LANGUAGES: '/api/languages',\n  VALIDATE: '/api/validate',\n  EXPORT: '/api/export'\n} as const;\n\n// Feature flags\nexport const FEATURE_FLAGS = {\n  ENABLE_CLOUD_SYNC: false,\n  ENABLE_TEAM_TEMPLATES: false,\n  ENABLE_ANALYTICS: false,\n  ENABLE_BETA_FEATURES: false\n} as const;\n\n// Default settings\n// Function to detect system theme preference\nconst getSystemTheme = (): 'light' | 'dark' => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n  return 'light'; // fallback\n};\n\nexport const DEFAULT_SETTINGS = {\n  theme: getSystemTheme(),\n  fontSize: 'medium' as const,\n  popupWidth: 400,\n  popupHeight: 600,\n  compactMode: false,\n  showPreview: true,\n  animations: true,\n  highContrast: false,\n  accentColor: '#007bff',\n  debugMode: false,\n  performanceMonitoring: false,\n  cacheSize: 10,\n  maxHistory: 100,\n  autoSave: true,\n  autoSaveDelay: 1000,\n  experimentalFeatures: false,\n  telemetry: false,\n  updateFrequency: 'weekly' as const,\n  backupFrequency: 'monthly' as const,\n  strictValidation: false,\n  timeoutDuration: 5000,\n  maxRetries: 3,\n  defaultLicense: 'MIT',\n  defaultLanguage: 'javascript',\n  exportFormat: 'clipboard' as const,\n  autoFillDates: true,\n  rememberLastValues: true,\n  defaultAuthor: '',\n  defaultProject: '',\n  autoDeactivateDuration: 180000 // 3 minutes in milliseconds\n} as const;\n\n// Default header data\nexport const DEFAULT_HEADER_DATA = {\n  fileName: '',\n  project: '',\n  author: '',\n  creationDate: '',\n  lastUpdated: '',\n  version: '1.0.0',\n  description: '',\n  dependencies: '',\n  license: 'MIT',\n  status: 'Development',\n  language: 'javascript',\n  usage: '',\n  notes: '',\n  todo: '',\n  headerType: 'simple' as const\n} as const;\n\n// Licenses\nexport const LICENSES = [\n  'MIT',\n  'GPL-3.0',\n  'Apache-2.0',\n  'BSD-3-Clause',\n  'ISC',\n  'Unlicense',\n  'Custom'\n] as const;\n\n\n// Platforms\nexport const PLATFORMS = [\n  'Chrome',\n  'Firefox',\n  'Edge',\n  'Brave'\n] as const;\n\n// Export options\nexport const EXPORT_OPTIONS = [\n  'clipboard',\n  'file',\n  'insert'\n] as const;\n","import { UserPreferences } from '@/types';\r\nimport { languageConfigs } from '@/utils/language-configs';\r\nimport { DEFAULT_VALUES, STORAGE_KEYS } from '@/utils/constants';\r\n\r\nexport class GeneralSettings {\r\n  private container: HTMLElement;\r\n  private settings: UserPreferences;\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.settings = this.getDefaultSettings();\r\n    this.render();\r\n    this.setupEventListeners();\r\n    this.loadSettings();\r\n  }\r\n\r\n  private getDefaultSettings(): UserPreferences {\r\n    return {\r\n      theme: DEFAULT_VALUES.THEME,\r\n      defaultLanguage: DEFAULT_VALUES.LANGUAGE,\r\n      defaultAuthor: DEFAULT_VALUES.AUTHOR,\r\n      defaultProject: DEFAULT_VALUES.PROJECT,\r\n      defaultLicense: DEFAULT_VALUES.LICENSE,\r\n      autoFillDates: true,\r\n      rememberLastValues: true,\r\n      exportFormat: DEFAULT_VALUES.EXPORT_FORMAT,\r\n      showPreview: true,\r\n      headerType: 'simple',\r\n      enableAnalytics: false,\r\n      enableBetaFeatures: false\r\n    };\r\n  }\r\n\r\n  private render(): void {\r\n    this.container.innerHTML = `\r\n      <div class=\"settings-grid\">\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-author\">Default Author</label>\r\n          <input type=\"text\" id=\"default-author\" class=\"form-input\" placeholder=\"Your Name\" value=\"${this.settings.defaultAuthor}\">\r\n          <p class=\"setting-description\">Default author name for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-project\">Default Project</label>\r\n          <input type=\"text\" id=\"default-project\" class=\"form-input\" placeholder=\"Project Name\" value=\"${this.settings.defaultProject}\">\r\n          <p class=\"setting-description\">Default project name for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-language\">Default Language</label>\r\n          <select id=\"default-language\" class=\"form-input\">\r\n            ${this.renderLanguageOptions()}\r\n          </select>\r\n          <p class=\"setting-description\">Default programming language for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-license\">Default License</label>\r\n          <select id=\"default-license\" class=\"form-input\">\r\n            <option value=\"MIT\" ${this.settings.defaultLicense === 'MIT' ? 'selected' : ''}>MIT</option>\r\n            <option value=\"Apache-2.0\" ${this.settings.defaultLicense === 'Apache-2.0' ? 'selected' : ''}>Apache 2.0</option>\r\n            <option value=\"GPL-3.0\" ${this.settings.defaultLicense === 'GPL-3.0' ? 'selected' : ''}>GPL 3.0</option>\r\n            <option value=\"BSD-3-Clause\" ${this.settings.defaultLicense === 'BSD-3-Clause' ? 'selected' : ''}>BSD 3-Clause</option>\r\n            <option value=\"ISC\" ${this.settings.defaultLicense === 'ISC' ? 'selected' : ''}>ISC</option>\r\n            <option value=\"Unlicense\" ${this.settings.defaultLicense === 'Unlicense' ? 'selected' : ''}>Unlicense</option>\r\n          </select>\r\n          <p class=\"setting-description\">Default license for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"export-format\">Export Format</label>\r\n          <select id=\"export-format\" class=\"form-input\">\r\n            <option value=\"clipboard\" ${this.settings.exportFormat === 'clipboard' ? 'selected' : ''}>Copy to Clipboard</option>\r\n            <option value=\"file\" ${this.settings.exportFormat === 'file' ? 'selected' : ''}>Download File</option>\r\n            <option value=\"insert\" ${this.settings.exportFormat === 'insert' ? 'selected' : ''}>Insert into Editor</option>\r\n          </select>\r\n          <p class=\"setting-description\">Default export method for generated headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"auto-fill-dates\" ${this.settings.autoFillDates ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Auto-fill Dates\r\n          </label>\r\n          <p class=\"setting-description\">Automatically fill creation and update dates</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"remember-last-values\" ${this.settings.rememberLastValues ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Remember Last Values\r\n          </label>\r\n          <p class=\"setting-description\">Remember form values between sessions</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"show-preview\" ${this.settings.showPreview ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Show Preview\r\n          </label>\r\n          <p class=\"setting-description\">Show live preview of generated headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"enable-analytics\" ${this.settings.enableAnalytics ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Enable Analytics\r\n          </label>\r\n          <p class=\"setting-description\">Help improve HeadForge by sharing anonymous usage data</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"enable-beta-features\" ${this.settings.enableBetaFeatures ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Enable Beta Features\r\n          </label>\r\n          <p class=\"setting-description\">Access experimental features (may be unstable)</p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderLanguageOptions(): string {\r\n    const languageArray = Object.values(languageConfigs);\r\n    const categories = [...new Set(languageArray.map(lang => lang.category))];\r\n    \r\n    let options = '';\r\n    categories.forEach(category => {\r\n      options += `<optgroup label=\"${this.capitalizeFirst(category)}\">`;\r\n      const categoryLanguages = languageArray.filter(lang => lang.category === category);\r\n      categoryLanguages.forEach(language => {\r\n        const selected = this.settings.defaultLanguage === language.id ? 'selected' : '';\r\n        options += `<option value=\"${language.id}\" ${selected}>${language.name}</option>`;\r\n      });\r\n      options += '</optgroup>';\r\n    });\r\n    \r\n    return options;\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Input changes\r\n    this.container.addEventListener('input', (e) => {\r\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\r\n      this.updateSetting(target);\r\n    });\r\n\r\n    this.container.addEventListener('change', (e) => {\r\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\r\n      this.updateSetting(target);\r\n    });\r\n  }\r\n\r\n  private updateSetting(input: HTMLInputElement | HTMLSelectElement): void {\r\n    const id = input.id;\r\n    \r\n    switch (id) {\r\n      case 'default-author':\r\n        this.settings.defaultAuthor = input.value;\r\n        break;\r\n      case 'default-project':\r\n        this.settings.defaultProject = input.value;\r\n        break;\r\n      case 'default-language':\r\n        this.settings.defaultLanguage = input.value;\r\n        break;\r\n      case 'default-license':\r\n        this.settings.defaultLicense = input.value;\r\n        break;\r\n      case 'export-format':\r\n        this.settings.exportFormat = input.value as 'clipboard' | 'file' | 'insert';\r\n        break;\r\n      case 'auto-fill-dates':\r\n        this.settings.autoFillDates = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'remember-last-values':\r\n        this.settings.rememberLastValues = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'show-preview':\r\n        this.settings.showPreview = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'enable-analytics':\r\n        this.settings.enableAnalytics = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'enable-beta-features':\r\n        this.settings.enableBetaFeatures = (input as HTMLInputElement).checked;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async loadSettings(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(STORAGE_KEYS.USER_PREFERENCES);\r\n      if (result[STORAGE_KEYS.USER_PREFERENCES]) {\r\n        this.settings = { ...this.settings, ...result[STORAGE_KEYS.USER_PREFERENCES] };\r\n        this.updateFormValues();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading general settings:', error);\r\n    }\r\n  }\r\n\r\n  private updateFormValues(): void {\r\n    // Update form with loaded settings\r\n    const inputs = {\r\n      'default-author': this.settings.defaultAuthor,\r\n      'default-project': this.settings.defaultProject,\r\n      'default-language': this.settings.defaultLanguage,\r\n      'default-license': this.settings.defaultLicense,\r\n      'export-format': this.settings.exportFormat\r\n    };\r\n\r\n    Object.entries(inputs).forEach(([id, value]) => {\r\n      const input = this.container.querySelector(`#${id}`) as HTMLInputElement | HTMLSelectElement;\r\n      if (input) {\r\n        input.value = value;\r\n      }\r\n    });\r\n\r\n    const checkboxes = {\r\n      'auto-fill-dates': this.settings.autoFillDates,\r\n      'remember-last-values': this.settings.rememberLastValues,\r\n      'show-preview': this.settings.showPreview,\r\n      'enable-analytics': this.settings.enableAnalytics,\r\n      'enable-beta-features': this.settings.enableBetaFeatures\r\n    };\r\n\r\n    Object.entries(checkboxes).forEach(([id, value]) => {\r\n      const checkbox = this.container.querySelector(`#${id}`) as HTMLInputElement;\r\n      if (checkbox) {\r\n        checkbox.checked = value ?? false;\r\n      }\r\n    });\r\n  }\r\n\r\n  public getSettings(): UserPreferences {\r\n    return { ...this.settings };\r\n  }\r\n\r\n  public setSettings(settings: UserPreferences): void {\r\n    this.settings = { ...settings };\r\n    this.updateFormValues();\r\n  }\r\n\r\n  private capitalizeFirst(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n}","import { ExtensionSettings } from '@/types';\nimport { DEFAULT_SETTINGS } from '@/utils/constants';\n\nexport class AppearanceSettings {\n  private container: HTMLElement;\n  private settings: ExtensionSettings;\n\n  constructor(container: HTMLElement) {\n    this.container = container;\n    this.settings = this.getDefaultSettings();\n    this.render();\n    this.setupEventListeners();\n    this.loadSettings();\n  }\n\n  private getDefaultSettings(): ExtensionSettings {\n    return {\n      ...DEFAULT_SETTINGS,\n      theme: window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n    };\n  }\n\n  private render(): void {\n    this.container.innerHTML = `\n      <div class=\"settings-grid\">\n        <div class=\"setting-group\">\n          <label for=\"theme-select\">Theme</label>\n          <select id=\"theme-select\" class=\"form-input\">\n            <option value=\"light\" ${this.settings.theme === 'light' ? 'selected' : ''}>Light</option>\n            <option value=\"dark\" ${this.settings.theme === 'dark' ? 'selected' : ''}>Dark</option>\n          </select>\n          <p class=\"setting-description\">Choose your preferred theme or let it follow your system preference</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"font-size\">Font Size</label>\n          <select id=\"font-size\" class=\"form-input\">\n            <option value=\"small\" ${this.settings.fontSize === 'small' ? 'selected' : ''}>Small</option>\n            <option value=\"medium\" ${this.settings.fontSize === 'medium' ? 'selected' : ''}>Medium</option>\n            <option value=\"large\" ${this.settings.fontSize === 'large' ? 'selected' : ''}>Large</option>\n          </select>\n          <p class=\"setting-description\">Adjust the font size for better readability</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"popup-width\">Popup Width (px)</label>\n          <input type=\"number\" id=\"popup-width\" class=\"form-input\" min=\"300\" max=\"600\" step=\"10\" value=\"${this.settings.popupWidth}\">\n          <p class=\"setting-description\">Width of the extension popup window</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"popup-height\">Popup Height (px)</label>\n          <input type=\"number\" id=\"popup-height\" class=\"form-input\" min=\"400\" max=\"800\" step=\"10\" value=\"${this.settings.popupHeight}\">\n          <p class=\"setting-description\">Height of the extension popup window</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"accent-color\">Accent Color</label>\n          <input type=\"color\" id=\"accent-color\" class=\"form-input\" value=\"${this.settings.accentColor}\">\n          <p class=\"setting-description\">Primary color used throughout the interface</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"compact-mode\" ${this.settings.compactMode ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Compact Mode\n          </label>\n          <p class=\"setting-description\">Use a more compact layout with reduced spacing</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"animations\" ${this.settings.animations ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Enable Animations\n          </label>\n          <p class=\"setting-description\">Enable smooth transitions and animations</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"high-contrast\" ${this.settings.highContrast ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            High Contrast\n          </label>\n          <p class=\"setting-description\">Increase contrast for better accessibility</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"debug-mode\" ${this.settings.debugMode ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Debug Mode\n          </label>\n          <p class=\"setting-description\">Show additional debug information and console logs</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"performance-monitoring\" ${this.settings.performanceMonitoring ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Performance Monitoring\n          </label>\n          <p class=\"setting-description\">Monitor and log performance metrics</p>\n        </div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    // Input changes\n    this.container.addEventListener('input', (e) => {\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\n      this.updateSetting(target);\n    });\n\n    this.container.addEventListener('change', (e) => {\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\n      this.updateSetting(target);\n    });\n  }\n\n  private updateSetting(input: HTMLInputElement | HTMLSelectElement): void {\n    const id = input.id;\n    \n    switch (id) {\n      case 'theme-select':\n        this.settings.theme = input.value as 'light' | 'dark';\n        break;\n      case 'font-size':\n        this.settings.fontSize = input.value as 'small' | 'medium' | 'large';\n        break;\n      case 'popup-width':\n        this.settings.popupWidth = parseInt(input.value);\n        break;\n      case 'popup-height':\n        this.settings.popupHeight = parseInt(input.value);\n        break;\n      case 'accent-color':\n        this.settings.accentColor = input.value;\n        break;\n      case 'compact-mode':\n        this.settings.compactMode = (input as HTMLInputElement).checked;\n        break;\n      case 'animations':\n        this.settings.animations = (input as HTMLInputElement).checked;\n        break;\n      case 'high-contrast':\n        this.settings.highContrast = (input as HTMLInputElement).checked;\n        break;\n      case 'debug-mode':\n        this.settings.debugMode = (input as HTMLInputElement).checked;\n        break;\n      case 'performance-monitoring':\n        this.settings.performanceMonitoring = (input as HTMLInputElement).checked;\n        break;\n    }\n  }\n\n  private async loadSettings(): Promise<void> {\n    try {\n      const result = await chrome.storage.sync.get(['extensionSettings']);\n      if (result.extensionSettings) {\n        this.settings = { ...this.settings, ...result.extensionSettings };\n        this.updateFormValues();\n      }\n    } catch (error) {\n      console.error('Error loading appearance settings:', error);\n    }\n  }\n\n  private updateFormValues(): void {\n    // Update form with loaded settings\n    const inputs = {\n      'theme-select': this.settings.theme,\n      'font-size': this.settings.fontSize,\n      'popup-width': this.settings.popupWidth,\n      'popup-height': this.settings.popupHeight,\n      'accent-color': this.settings.accentColor\n    };\n\n    Object.entries(inputs).forEach(([id, value]) => {\n      const input = this.container.querySelector(`#${id}`) as HTMLInputElement | HTMLSelectElement;\n      if (input) {\n        input.value = value.toString();\n      }\n    });\n\n    const checkboxes = {\n      'compact-mode': this.settings.compactMode,\n      'animations': this.settings.animations,\n      'high-contrast': this.settings.highContrast,\n      'debug-mode': this.settings.debugMode,\n      'performance-monitoring': this.settings.performanceMonitoring\n    };\n\n    Object.entries(checkboxes).forEach(([id, value]) => {\n      const checkbox = this.container.querySelector(`#${id}`) as HTMLInputElement;\n      if (checkbox) {\n        checkbox.checked = value;\n      }\n    });\n  }\n\n  public getSettings(): ExtensionSettings {\n    return { ...this.settings };\n  }\n\n  public setSettings(settings: ExtensionSettings): void {\n    this.settings = { ...settings };\n    this.updateFormValues();\n  }\n}","// import { LanguageConfig } from '@/types';\r\nimport { languageConfigs } from '@/utils/language-configs';\r\n\r\nexport class TemplatesSettings {\r\n  private container: HTMLElement;\r\n  private customTemplates: Map<string, string> = new Map();\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.loadCustomTemplates();\r\n    this.render();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  private render(): void {\r\n    this.container.innerHTML = `\r\n      <div class=\"templates-settings\">\r\n        <div class=\"setting-group\">\r\n          <h3>Built-in Languages</h3>\r\n          <p class=\"setting-description\">Manage built-in programming language templates</p>\r\n          <div class=\"languages-grid\">\r\n            ${this.renderBuiltInLanguages()}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <h3>Custom Templates</h3>\r\n          <p class=\"setting-description\">Add or modify custom header templates</p>\r\n          <div class=\"custom-templates-container\">\r\n            <div class=\"add-template-section\">\r\n              <input type=\"text\" id=\"new-template-language\" class=\"form-input\" placeholder=\"Language name (e.g., Python, Go)\">\r\n              <button id=\"add-template-btn\" class=\"btn btn-primary\">Add Template</button>\r\n            </div>\r\n            <div id=\"custom-templates-list\" class=\"custom-templates-list\">\r\n              ${this.renderCustomTemplates()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <h3>Template Actions</h3>\r\n          <div class=\"template-actions\">\r\n            <button id=\"export-templates\" class=\"btn btn-secondary\">Export Templates</button>\r\n            <button id=\"import-templates\" class=\"btn btn-secondary\">Import Templates</button>\r\n            <button id=\"reset-templates\" class=\"btn btn-danger\">Reset to Defaults</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderBuiltInLanguages(): string {\r\n    const languages = Object.values(languageConfigs);\r\n    const categories = [...new Set(languages.map(lang => lang.category))];\r\n    \r\n    let html = '';\r\n    categories.forEach(category => {\r\n      html += `<div class=\"language-category\">`;\r\n      html += `<h4>${this.capitalizeFirst(category)}</h4>`;\r\n      \r\n      const categoryLanguages = languages.filter(lang => lang.category === category);\r\n      categoryLanguages.forEach(language => {\r\n        html += `\r\n          <div class=\"language-item\" data-language=\"${language.id}\">\r\n            <div class=\"language-info\">\r\n              <strong>${language.name}</strong>\r\n              <span class=\"language-extensions\">${language.extension}</span>\r\n            </div>\r\n            <div class=\"language-actions\">\r\n              <button class=\"btn btn-sm btn-outline edit-template\" data-language=\"${language.id}\">\r\n                Edit\r\n              </button>\r\n              <button class=\"btn btn-sm btn-outline preview-template\" data-language=\"${language.id}\">\r\n                Preview\r\n              </button>\r\n            </div>\r\n          </div>\r\n        `;\r\n      });\r\n      \r\n      html += `</div>`;\r\n    });\r\n    \r\n    return html;\r\n  }\r\n\r\n  private renderCustomTemplates(): string {\r\n    if (this.customTemplates.size === 0) {\r\n      return '<p class=\"no-templates\">No custom templates yet. Add one above!</p>';\r\n    }\r\n\r\n    let html = '';\r\n    this.customTemplates.forEach((template, language) => {\r\n      html += `\r\n        <div class=\"custom-template-item\" data-language=\"${language}\">\r\n          <div class=\"template-header\">\r\n            <strong>${language}</strong>\r\n            <div class=\"template-actions\">\r\n              <button class=\"btn btn-sm btn-outline edit-custom-template\" data-language=\"${language}\">\r\n                Edit\r\n              </button>\r\n              <button class=\"btn btn-sm btn-outline preview-custom-template\" data-language=\"${language}\">\r\n                Preview\r\n              </button>\r\n              <button class=\"btn btn-sm btn-danger delete-custom-template\" data-language=\"${language}\">\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"template-preview\">\r\n            <pre><code>${this.escapeHtml(template.substring(0, 200))}${template.length > 200 ? '...' : ''}</code></pre>\r\n          </div>\r\n        </div>\r\n      `;\r\n    });\r\n\r\n    return html;\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Add template button\r\n    const addBtn = this.container.querySelector('#add-template-btn');\r\n    if (addBtn) {\r\n      addBtn.addEventListener('click', () => this.addCustomTemplate());\r\n    }\r\n\r\n    // Built-in template actions\r\n    this.container.addEventListener('click', (e) => {\r\n      const target = e.target as HTMLElement;\r\n      \r\n      if (target.classList.contains('edit-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.editBuiltInTemplate(language);\r\n      }\r\n      \r\n      if (target.classList.contains('preview-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.previewBuiltInTemplate(language);\r\n      }\r\n\r\n      if (target.classList.contains('edit-custom-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.editCustomTemplate(language);\r\n      }\r\n      \r\n      if (target.classList.contains('preview-custom-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.previewCustomTemplate(language);\r\n      }\r\n\r\n      if (target.classList.contains('delete-custom-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.deleteCustomTemplate(language);\r\n      }\r\n    });\r\n\r\n    // Template actions\r\n    const exportBtn = this.container.querySelector('#export-templates');\r\n    const importBtn = this.container.querySelector('#import-templates');\r\n    const resetBtn = this.container.querySelector('#reset-templates');\r\n\r\n    if (exportBtn) exportBtn.addEventListener('click', () => this.exportTemplates());\r\n    if (importBtn) importBtn.addEventListener('click', () => this.importTemplates());\r\n    if (resetBtn) resetBtn.addEventListener('click', () => this.resetTemplates());\r\n  }\r\n\r\n  private addCustomTemplate(): void {\r\n    const languageInput = this.container.querySelector('#new-template-language') as HTMLInputElement;\r\n    const language = languageInput.value.trim();\r\n    \r\n    if (!language) {\r\n      alert('Please enter a language name');\r\n      return;\r\n    }\r\n\r\n    if (this.customTemplates.has(language) || languageConfigs[language]) {\r\n      alert('A template for this language already exists');\r\n      return;\r\n    }\r\n\r\n    const template = this.getDefaultTemplate(language);\r\n    this.customTemplates.set(language, template);\r\n    this.saveCustomTemplates();\r\n    this.render();\r\n    this.setupEventListeners();\r\n    \r\n    languageInput.value = '';\r\n    this.showToast(`Template for ${language} added successfully`, 'success');\r\n  }\r\n\r\n  private editBuiltInTemplate(languageId: string): void {\r\n    const language = languageConfigs[languageId];\r\n    if (!language) return;\r\n\r\n    this.openTemplateEditor(language.name, language.template, languageId, false);\r\n  }\r\n\r\n  private editCustomTemplate(language: string): void {\r\n    const template = this.customTemplates.get(language);\r\n    if (!template) return;\r\n\r\n    this.openTemplateEditor(language, template, language, true);\r\n  }\r\n\r\n  private previewBuiltInTemplate(languageId: string): void {\r\n    const language = languageConfigs[languageId];\r\n    if (!language) return;\r\n\r\n    this.openTemplatePreview(language.name, language.template);\r\n  }\r\n\r\n  private previewCustomTemplate(language: string): void {\r\n    const template = this.customTemplates.get(language);\r\n    if (!template) return;\r\n\r\n    this.openTemplatePreview(language, template);\r\n  }\r\n\r\n  private deleteCustomTemplate(language: string): void {\r\n    if (confirm(`Are you sure you want to delete the template for ${language}?`)) {\r\n      this.customTemplates.delete(language);\r\n      this.saveCustomTemplates();\r\n      this.render();\r\n      this.setupEventListeners();\r\n      this.showToast(`Template for ${language} deleted`, 'info');\r\n    }\r\n  }\r\n\r\n  private openTemplateEditor(languageName: string, template: string, languageId: string, isCustom: boolean): void {\r\n    // Create modal for template editing\r\n    const modal = document.createElement('div');\r\n    modal.className = 'template-editor-modal';\r\n    modal.innerHTML = `\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h3>Edit ${languageName} Template</h3>\r\n          <button class=\"modal-close\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <textarea id=\"template-editor\" class=\"template-textarea\" placeholder=\"Enter your template here...\">${this.escapeHtml(template)}</textarea>\r\n          <div class=\"template-variables\">\r\n            <h4>Available Variables:</h4>\r\n            <ul>\r\n              <li><code>{{fileName}}</code> - File name</li>\r\n              <li><code>{{project}}</code> - Project name</li>\r\n              <li><code>{{author}}</code> - Author name</li>\r\n              <li><code>{{description}}</code> - File description</li>\r\n              <li><code>{{creationDate}}</code> - Creation date</li>\r\n              <li><code>{{lastUpdated}}</code> - Last updated date</li>\r\n              <li><code>{{license}}</code> - License</li>\r\n              <li><code>{{version}}</code> - Version</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button class=\"btn btn-secondary modal-cancel\">Cancel</button>\r\n          <button class=\"btn btn-primary modal-save\">Save Template</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    document.body.appendChild(modal);\r\n\r\n    // Event listeners for modal\r\n    const closeBtn = modal.querySelector('.modal-close');\r\n    const cancelBtn = modal.querySelector('.modal-cancel');\r\n    const saveBtn = modal.querySelector('.modal-save');\r\n\r\n    const closeModal = () => {\r\n      document.body.removeChild(modal);\r\n    };\r\n\r\n    closeBtn?.addEventListener('click', closeModal);\r\n    cancelBtn?.addEventListener('click', closeModal);\r\n    \r\n    saveBtn?.addEventListener('click', () => {\r\n      const textarea = modal.querySelector('#template-editor') as HTMLTextAreaElement;\r\n      const newTemplate = textarea.value;\r\n      \r\n      if (isCustom) {\r\n        this.customTemplates.set(languageId, newTemplate);\r\n        this.saveCustomTemplates();\r\n      } else {\r\n        // For built-in templates, we would need to implement a different approach\r\n        // For now, we'll just show a message\r\n        this.showToast('Built-in templates cannot be modified directly. Consider creating a custom template instead.', 'warning');\r\n      }\r\n      \r\n      closeModal();\r\n      this.render();\r\n      this.setupEventListeners();\r\n    });\r\n\r\n    // Close on backdrop click\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        closeModal();\r\n      }\r\n    });\r\n  }\r\n\r\n  private openTemplatePreview(languageName: string, template: string): void {\r\n    const modal = document.createElement('div');\r\n    modal.className = 'template-preview-modal';\r\n    modal.innerHTML = `\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h3>${languageName} Template Preview</h3>\r\n          <button class=\"modal-close\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <pre><code>${this.escapeHtml(template)}</code></pre>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button class=\"btn btn-primary modal-close\">Close</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    document.body.appendChild(modal);\r\n\r\n    const closeBtn = modal.querySelector('.modal-close');\r\n    closeBtn?.addEventListener('click', () => {\r\n      document.body.removeChild(modal);\r\n    });\r\n\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        document.body.removeChild(modal);\r\n      }\r\n    });\r\n  }\r\n\r\n  private exportTemplates(): void {\r\n    const exportData = {\r\n      customTemplates: Object.fromEntries(this.customTemplates),\r\n      exportDate: new Date().toISOString()\r\n    };\r\n\r\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `headforge-templates-${new Date().toISOString().split('T')[0]}.json`;\r\n    link.style.display = 'none';\r\n    \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    URL.revokeObjectURL(url);\r\n    this.showToast('Templates exported successfully', 'success');\r\n  }\r\n\r\n  private importTemplates(): void {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    \r\n    input.addEventListener('change', (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (!file) return;\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        try {\r\n          const data = JSON.parse(e.target?.result as string);\r\n          if (data.customTemplates) {\r\n            this.customTemplates = new Map(Object.entries(data.customTemplates));\r\n            this.saveCustomTemplates();\r\n            this.render();\r\n            this.setupEventListeners();\r\n            this.showToast('Templates imported successfully', 'success');\r\n          }\r\n        } catch (error) {\r\n          this.showToast('Failed to import templates. Please check the file format.', 'error');\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n    \r\n    input.click();\r\n  }\r\n\r\n  private resetTemplates(): void {\r\n    if (confirm('Are you sure you want to reset all custom templates? This action cannot be undone.')) {\r\n      this.customTemplates.clear();\r\n      this.saveCustomTemplates();\r\n      this.render();\r\n      this.setupEventListeners();\r\n      this.showToast('Custom templates reset successfully', 'info');\r\n    }\r\n  }\r\n\r\n  private getDefaultTemplate(language: string): string {\r\n    return `/**\r\n * @fileoverview ${language} file template\r\n * @author Your Name\r\n * @created ${new Date().toLocaleDateString()}\r\n */\r\n\r\n// Your code here\r\n`;\r\n  }\r\n\r\n  private async loadCustomTemplates(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(['customTemplates']);\r\n      if (result.customTemplates) {\r\n        this.customTemplates = new Map(Object.entries(result.customTemplates));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading custom templates:', error);\r\n    }\r\n  }\r\n\r\n  private async saveCustomTemplates(): Promise<void> {\r\n    try {\r\n      await chrome.storage.sync.set({\r\n        customTemplates: Object.fromEntries(this.customTemplates)\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving custom templates:', error);\r\n    }\r\n  }\r\n\r\n  private escapeHtml(text: string): string {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n\r\n  private capitalizeFirst(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n\r\n  private showToast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info'): void {\r\n    // Simple toast implementation\r\n    const toast = document.createElement('div');\r\n    toast.className = `toast toast-${type}`;\r\n    toast.textContent = message;\r\n    toast.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      padding: 12px 20px;\r\n      border-radius: 4px;\r\n      color: white;\r\n      z-index: 10000;\r\n      font-weight: 500;\r\n    `;\r\n    \r\n    const colors = {\r\n      success: '#10b981',\r\n      error: '#ef4444',\r\n      warning: '#f59e0b',\r\n      info: '#3b82f6'\r\n    };\r\n    \r\n    toast.style.backgroundColor = colors[type];\r\n    \r\n    document.body.appendChild(toast);\r\n    \r\n    setTimeout(() => {\r\n      if (toast.parentElement) {\r\n        document.body.removeChild(toast);\r\n      }\r\n    }, 3000);\r\n  }\r\n}","import { ExtensionSettings } from '../../types';\r\nimport { DEFAULT_SETTINGS } from '../../utils/constants';\r\n\r\nexport class AdvancedSettings {\r\n  private container: HTMLElement;\r\n  private settings: ExtensionSettings;\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.settings = { ...DEFAULT_SETTINGS };\r\n    this.initialize();\r\n  }\r\n\r\n  private async initialize(): Promise<void> {\r\n    await this.loadSettings();\r\n    this.render();\r\n    this.bindEvents();\r\n  }\r\n\r\n  private async loadSettings(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.local.get(['extensionSettings']);\r\n      if (result.extensionSettings) {\r\n        this.settings = { ...DEFAULT_SETTINGS, ...result.extensionSettings };\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n    }\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    try {\r\n      await chrome.storage.local.set({ extensionSettings: this.settings });\r\n      this.showSuccessMessage('Settings saved successfully!');\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n      this.showErrorMessage('Failed to save settings');\r\n    }\r\n  }\r\n\r\n  private render(): void {\r\n    this.container.innerHTML = `\r\n      <div class=\"settings-section\">\r\n        <h2>Advanced Settings</h2>\r\n        \r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"debug-mode\" ${this.settings.debugMode ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Debug Mode\r\n          </label>\r\n          <p class=\"setting-description\">Enable debug logging and additional console output.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"performance-monitoring\" ${this.settings.performanceMonitoring ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Performance Monitoring\r\n          </label>\r\n          <p class=\"setting-description\">Monitor and log performance metrics.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"cache-size\">Cache Size (MB)</label>\r\n          <input type=\"number\" id=\"cache-size\" class=\"form-input\" min=\"1\" max=\"100\" value=\"${this.settings.cacheSize}\">\r\n          <p class=\"setting-description\">Maximum cache size for storing generated headers.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"max-history\">Max History Items</label>\r\n          <input type=\"number\" id=\"max-history\" class=\"form-input\" min=\"10\" max=\"1000\" value=\"${this.settings.maxHistory}\">\r\n          <p class=\"setting-description\">Maximum number of history items to keep.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"auto-save\" ${this.settings.autoSave ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Auto Save\r\n          </label>\r\n          <p class=\"setting-description\">Automatically save form data as you type.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"auto-save-delay\">Auto Save Delay (ms)</label>\r\n          <input type=\"number\" id=\"auto-save-delay\" class=\"form-input\" min=\"500\" max=\"10000\" step=\"500\" value=\"${this.settings.autoSaveDelay}\">\r\n          <p class=\"setting-description\">Delay before auto-saving form data.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"experimental-features\" ${this.settings.experimentalFeatures ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Experimental Features\r\n          </label>\r\n          <p class=\"setting-description\">Enable experimental and beta features.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"telemetry\" ${this.settings.telemetry ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Anonymous Usage Analytics\r\n          </label>\r\n          <p class=\"setting-description\">Help improve HeadForge by sharing anonymous usage data.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"update-frequency\">Update Check Frequency</label>\r\n          <select id=\"update-frequency\" class=\"form-select\">\r\n            <option value=\"daily\" ${this.settings.updateFrequency === 'daily' ? 'selected' : ''}>Daily</option>\r\n            <option value=\"weekly\" ${this.settings.updateFrequency === 'weekly' ? 'selected' : ''}>Weekly</option>\r\n            <option value=\"monthly\" ${this.settings.updateFrequency === 'monthly' ? 'selected' : ''}>Monthly</option>\r\n            <option value=\"never\" ${this.settings.updateFrequency === 'never' ? 'selected' : ''}>Never</option>\r\n          </select>\r\n          <p class=\"setting-description\">How often to check for extension updates.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"backup-frequency\">Backup Frequency</label>\r\n          <select id=\"backup-frequency\" class=\"form-select\">\r\n            <option value=\"daily\" ${this.settings.backupFrequency === 'daily' ? 'selected' : ''}>Daily</option>\r\n            <option value=\"weekly\" ${this.settings.backupFrequency === 'weekly' ? 'selected' : ''}>Weekly</option>\r\n            <option value=\"monthly\" ${this.settings.backupFrequency === 'monthly' ? 'selected' : ''}>Monthly</option>\r\n            <option value=\"never\" ${this.settings.backupFrequency === 'never' ? 'selected' : ''}>Never</option>\r\n          </select>\r\n          <p class=\"setting-description\">How often to backup your settings and data.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"strict-validation\" ${this.settings.strictValidation ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Strict Validation\r\n          </label>\r\n          <p class=\"setting-description\">Enable strict validation for all form inputs.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"timeout-duration\">Request Timeout (ms)</label>\r\n          <input type=\"number\" id=\"timeout-duration\" class=\"form-input\" min=\"1000\" max=\"30000\" step=\"1000\" value=\"${this.settings.timeoutDuration}\">\r\n          <p class=\"setting-description\">Timeout duration for extension operations.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"max-retries\">Max Retries</label>\r\n          <input type=\"number\" id=\"max-retries\" class=\"form-input\" min=\"0\" max=\"10\" value=\"${this.settings.maxRetries}\">\r\n          <p class=\"setting-description\">Maximum number of retries for failed operations.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"auto-deactivate-duration\">Dev Mode Auto-Deactivation (minutes)</label>\r\n          <input type=\"number\" id=\"auto-deactivate-duration\" class=\"form-input\" min=\"1\" max=\"60\" value=\"${this.settings.autoDeactivateDuration / 60000}\">\r\n          <p class=\"setting-description\">How long before Dev Mode automatically deactivates (1-60 minutes).</p>\r\n        </div>\r\n\r\n        <div class=\"setting-actions\">\r\n          <button type=\"button\" id=\"clear-cache\" class=\"btn btn-warning\">Clear Cache</button>\r\n          <button type=\"button\" id=\"clear-history\" class=\"btn btn-warning\">Clear History</button>\r\n          <button type=\"button\" id=\"export-settings\" class=\"btn btn-secondary\">Export Settings</button>\r\n          <button type=\"button\" id=\"import-settings\" class=\"btn btn-secondary\">Import Settings</button>\r\n          <button type=\"button\" id=\"reset-advanced\" class=\"btn btn-danger\">Reset to Defaults</button>\r\n          <button type=\"button\" id=\"save-advanced\" class=\"btn btn-primary\">Save Settings</button>\r\n        </div>\r\n\r\n        <div class=\"danger-zone\">\r\n          <h3>Danger Zone</h3>\r\n          <p>These actions cannot be undone. Please proceed with caution.</p>\r\n          \r\n          <div class=\"setting-actions\">\r\n            <button type=\"button\" id=\"reset-all-data\" class=\"btn btn-danger\">Reset All Data</button>\r\n            <button type=\"button\" id=\"uninstall-extension\" class=\"btn btn-danger\">Uninstall Extension</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private bindEvents(): void {\r\n    // Checkboxes\r\n    const checkboxes = this.container.querySelectorAll('input[type=\"checkbox\"]');\r\n    checkboxes.forEach(checkbox => {\r\n      checkbox.addEventListener('change', (e) => {\r\n        const target = e.target as HTMLInputElement;\r\n        this.updateCheckboxSetting(target);\r\n      });\r\n    });\r\n\r\n    // Number inputs\r\n    const numberInputs = this.container.querySelectorAll('input[type=\"number\"]');\r\n    numberInputs.forEach(input => {\r\n      input.addEventListener('change', (e) => {\r\n        const target = e.target as HTMLInputElement;\r\n        this.updateNumberSetting(target);\r\n      });\r\n    });\r\n\r\n    // Select inputs\r\n    const selectInputs = this.container.querySelectorAll('select');\r\n    selectInputs.forEach(select => {\r\n      select.addEventListener('change', (e) => {\r\n        const target = e.target as HTMLSelectElement;\r\n        this.updateSelectSetting(target);\r\n      });\r\n    });\r\n\r\n    // Action buttons\r\n    this.bindActionButtons();\r\n  }\r\n\r\n  private updateCheckboxSetting(checkbox: HTMLInputElement): void {\r\n    const id = checkbox.id;\r\n    \r\n    switch (id) {\r\n      case 'debug-mode':\r\n        this.settings.debugMode = checkbox.checked;\r\n        break;\r\n      case 'performance-monitoring':\r\n        this.settings.performanceMonitoring = checkbox.checked;\r\n        break;\r\n      case 'auto-save':\r\n        this.settings.autoSave = checkbox.checked;\r\n        break;\r\n      case 'experimental-features':\r\n        this.settings.experimentalFeatures = checkbox.checked;\r\n        break;\r\n      case 'telemetry':\r\n        this.settings.telemetry = checkbox.checked;\r\n        break;\r\n      case 'strict-validation':\r\n        this.settings.strictValidation = checkbox.checked;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private updateNumberSetting(input: HTMLInputElement): void {\r\n    const id = input.id;\r\n    const value = parseInt(input.value);\r\n    \r\n    switch (id) {\r\n      case 'cache-size':\r\n        this.settings.cacheSize = value;\r\n        break;\r\n      case 'max-history':\r\n        this.settings.maxHistory = value;\r\n        break;\r\n      case 'auto-save-delay':\r\n        this.settings.autoSaveDelay = value;\r\n        break;\r\n      case 'timeout-duration':\r\n        this.settings.timeoutDuration = value;\r\n        break;\r\n      case 'max-retries':\r\n        this.settings.maxRetries = value;\r\n        break;\r\n      case 'auto-deactivate-duration':\r\n        this.settings.autoDeactivateDuration = value * 60000; // Convert minutes to milliseconds\r\n        break;\r\n    }\r\n  }\r\n\r\n  private updateSelectSetting(select: HTMLSelectElement): void {\r\n    const id = select.id;\r\n    const value = select.value;\r\n    \r\n    switch (id) {\r\n      case 'update-frequency':\r\n        this.settings.updateFrequency = value as 'daily' | 'weekly' | 'monthly' | 'never';\r\n        break;\r\n      case 'backup-frequency':\r\n        this.settings.backupFrequency = value as 'daily' | 'weekly' | 'monthly' | 'never';\r\n        break;\r\n    }\r\n  }\r\n\r\n  private bindActionButtons(): void {\r\n    // Clear cache\r\n    const clearCacheBtn = this.container.querySelector('#clear-cache') as HTMLButtonElement;\r\n    clearCacheBtn?.addEventListener('click', () => this.clearCache());\r\n\r\n    // Clear history\r\n    const clearHistoryBtn = this.container.querySelector('#clear-history') as HTMLButtonElement;\r\n    clearHistoryBtn?.addEventListener('click', () => this.clearHistory());\r\n\r\n    // Export settings\r\n    const exportBtn = this.container.querySelector('#export-settings') as HTMLButtonElement;\r\n    exportBtn?.addEventListener('click', () => this.exportSettings());\r\n\r\n    // Import settings\r\n    const importBtn = this.container.querySelector('#import-settings') as HTMLButtonElement;\r\n    importBtn?.addEventListener('click', () => this.importSettings());\r\n\r\n    // Reset advanced\r\n    const resetBtn = this.container.querySelector('#reset-advanced') as HTMLButtonElement;\r\n    resetBtn?.addEventListener('click', () => this.resetToDefaults());\r\n\r\n    // Save advanced\r\n    const saveBtn = this.container.querySelector('#save-advanced') as HTMLButtonElement;\r\n    saveBtn?.addEventListener('click', () => this.saveSettings());\r\n\r\n    // Danger zone buttons\r\n    const resetAllBtn = this.container.querySelector('#reset-all-data') as HTMLButtonElement;\r\n    resetAllBtn?.addEventListener('click', () => this.resetAllData());\r\n\r\n    const uninstallBtn = this.container.querySelector('#uninstall-extension') as HTMLButtonElement;\r\n    uninstallBtn?.addEventListener('click', () => this.uninstallExtension());\r\n  }\r\n\r\n  private async clearCache(): Promise<void> {\r\n    if (confirm('Are you sure you want to clear the cache? This will remove all cached data.')) {\r\n      try {\r\n        await chrome.storage.local.remove(['cache', 'generatedHeaders']);\r\n        this.showSuccessMessage('Cache cleared successfully!');\r\n      } catch (error) {\r\n        this.showErrorMessage('Failed to clear cache');\r\n      }\r\n    }\r\n  }\r\n\r\n  private async clearHistory(): Promise<void> {\r\n    if (confirm('Are you sure you want to clear the history? This will remove all history items.')) {\r\n      try {\r\n        await chrome.storage.local.remove(['history', 'lastFormData']);\r\n        this.showSuccessMessage('History cleared successfully!');\r\n      } catch (error) {\r\n        this.showErrorMessage('Failed to clear history');\r\n      }\r\n    }\r\n  }\r\n\r\n  private async exportSettings(): Promise<void> {\r\n    try {\r\n      const settings = await chrome.storage.local.get(null);\r\n      const dataStr = JSON.stringify(settings, null, 2);\r\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n      \r\n      const url = URL.createObjectURL(dataBlob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'headforge-settings.json';\r\n      link.click();\r\n      \r\n      URL.revokeObjectURL(url);\r\n      this.showSuccessMessage('Settings exported successfully!');\r\n    } catch (error) {\r\n      this.showErrorMessage('Failed to export settings');\r\n    }\r\n  }\r\n\r\n  private async importSettings(): Promise<void> {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    \r\n    input.onchange = async (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) {\r\n        try {\r\n          const text = await file.text();\r\n          const settings = JSON.parse(text);\r\n          \r\n          if (confirm('Are you sure you want to import these settings? This will overwrite your current settings.')) {\r\n            await chrome.storage.local.clear();\r\n            await chrome.storage.local.set(settings);\r\n            this.showSuccessMessage('Settings imported successfully!');\r\n            location.reload();\r\n          }\r\n        } catch (error) {\r\n          this.showErrorMessage('Failed to import settings. Please check the file format.');\r\n        }\r\n      }\r\n    };\r\n    \r\n    input.click();\r\n  }\r\n\r\n  private async resetToDefaults(): Promise<void> {\r\n    if (confirm('Are you sure you want to reset advanced settings to defaults?')) {\r\n      this.settings = { ...DEFAULT_SETTINGS };\r\n      this.render();\r\n      this.bindEvents();\r\n      await this.saveSettings();\r\n    }\r\n  }\r\n\r\n  private async resetAllData(): Promise<void> {\r\n    if (confirm('Are you sure you want to reset ALL data? This will remove all settings, history, and cache. This action cannot be undone.')) {\r\n      if (confirm('This is your final warning. All data will be permanently deleted.')) {\r\n        try {\r\n          await chrome.storage.local.clear();\r\n          this.showSuccessMessage('All data reset successfully!');\r\n          location.reload();\r\n        } catch (error) {\r\n          this.showErrorMessage('Failed to reset data');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async uninstallExtension(): Promise<void> {\r\n    if (confirm('Are you sure you want to uninstall the extension? This will remove all data and the extension will be disabled.')) {\r\n      if (confirm('This is your final warning. The extension will be uninstalled.')) {\r\n        try {\r\n          await chrome.management.uninstallSelf();\r\n        } catch (error) {\r\n          this.showErrorMessage('Failed to uninstall extension');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private showSuccessMessage(message: string): void {\r\n    this.showMessage(message, 'success');\r\n  }\r\n\r\n  private showErrorMessage(message: string): void {\r\n    this.showMessage(message, 'error');\r\n  }\r\n\r\n  private showMessage(message: string, type: 'success' | 'error'): void {\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `toast toast-${type}`;\r\n    messageDiv.textContent = message;\r\n    \r\n    document.body.appendChild(messageDiv);\r\n    \r\n    setTimeout(() => {\r\n      messageDiv.remove();\r\n    }, 3000);\r\n  }\r\n}\r\n","import { UserPreferences, Theme } from '@/types';\r\nimport { languageConfigs } from '@/utils/language-configs';\r\nimport { DEFAULT_VALUES, STORAGE_KEYS, SUCCESS_MESSAGES, ERROR_MESSAGES } from '@/utils/constants';\r\n\r\nimport { GeneralSettings } from './pages/general';\r\nimport { AppearanceSettings } from './pages/appearance';\r\nimport { TemplatesSettings } from './pages/templates';\r\nimport { AdvancedSettings } from './pages/advanced';\r\n\r\nclass HeadForgeOptions {\r\n  private form!: HTMLFormElement;\r\n  private themeToggle!: HTMLElement;\r\n  private saveBtn!: HTMLElement;\r\n  private cancelBtn!: HTMLElement;\r\n  private exportBtn!: HTMLElement;\r\n  private importBtn!: HTMLElement;\r\n  private importFile!: HTMLInputElement;\r\n  private resetBtn!: HTMLElement;\r\n  private toastContainer!: HTMLElement;\r\n  \r\n  private userPreferences: UserPreferences = this.getDefaultPreferences();\r\n  private hasUnsavedChanges: boolean = false;\r\n  \r\n  // Settings pages\r\n  private generalSettings!: GeneralSettings;\r\n  private appearanceSettings!: AppearanceSettings;\r\n  private templatesSettings!: TemplatesSettings;\r\n  private advancedSettings!: AdvancedSettings;\r\n\r\n  constructor() {\r\n    this.initializeElements();\r\n    this.setupEventListeners();\r\n    this.initializeSettingsPages();\r\n    this.loadUserPreferences();\r\n    this.setupTheme();\r\n  }\r\n\r\n  private initializeElements(): void {\r\n    this.form = document.querySelector('.options-content') as HTMLFormElement;\r\n    this.themeToggle = document.getElementById('theme-toggle') as HTMLElement;\r\n    this.saveBtn = document.getElementById('saveSettings') as HTMLElement;\r\n    this.cancelBtn = document.getElementById('cancelSettings') as HTMLElement;\r\n    this.exportBtn = document.getElementById('exportSettings') as HTMLElement;\r\n    this.importBtn = document.getElementById('importSettings') as HTMLElement;\r\n    this.importFile = document.getElementById('importFile') as HTMLInputElement;\r\n    this.resetBtn = document.getElementById('resetSettings') as HTMLElement;\r\n    this.toastContainer = document.getElementById('toast-container') as HTMLElement;\r\n  }\r\n\r\n  private initializeSettingsPages(): void {\r\n    // Initialize settings pages\r\n    const generalContainer = document.getElementById('general-settings-container');\r\n    const appearanceContainer = document.getElementById('appearance-settings-container');\r\n    const templatesContainer = document.getElementById('templates-settings-container');\r\n    const advancedContainer = document.getElementById('advanced-settings-container');\r\n\r\n    if (generalContainer) {\r\n      this.generalSettings = new GeneralSettings(generalContainer);\r\n    }\r\n    if (appearanceContainer) {\r\n      this.appearanceSettings = new AppearanceSettings(appearanceContainer);\r\n    }\r\n    if (templatesContainer) {\r\n      this.templatesSettings = new TemplatesSettings(templatesContainer);\r\n    }\r\n    if (advancedContainer) {\r\n      this.advancedSettings = new AdvancedSettings(advancedContainer);\r\n    }\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Tab navigation\r\n    document.querySelectorAll('.options-nav-link').forEach(link => {\r\n      link.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        const tab = (e.target as HTMLElement).dataset.tab;\r\n        if (tab) {\r\n          this.switchTab(tab);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Form input events\r\n    this.form.addEventListener('input', () => {\r\n      this.hasUnsavedChanges = true;\r\n    });\r\n\r\n    this.form.addEventListener('change', () => {\r\n      this.hasUnsavedChanges = true;\r\n    });\r\n\r\n    // Theme toggle\r\n    if (this.themeToggle) {\r\n      this.themeToggle.addEventListener('click', () => this.toggleTheme());\r\n    }\r\n\r\n    // Button events\r\n    if (this.saveBtn) this.saveBtn.addEventListener('click', () => this.saveSettings());\r\n    if (this.cancelBtn) this.cancelBtn.addEventListener('click', () => this.cancelChanges());\r\n    if (this.exportBtn) this.exportBtn.addEventListener('click', () => this.exportSettings());\r\n    if (this.importBtn) this.importBtn.addEventListener('click', () => this.importSettings());\r\n    if (this.resetBtn) this.resetBtn.addEventListener('click', () => this.resetSettings());\r\n\r\n    // File import\r\n    if (this.importFile) {\r\n      this.importFile.addEventListener('change', (e) => this.handleFileImport(e));\r\n    }\r\n\r\n    // Keyboard shortcuts\r\n    document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));\r\n\r\n    // Before unload warning\r\n    window.addEventListener('beforeunload', (e) => {\r\n      if (this.hasUnsavedChanges) {\r\n        e.preventDefault();\r\n        e.returnValue = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  private switchTab(tabName: string): void {\r\n    // Update nav links\r\n    document.querySelectorAll('.options-nav-link').forEach(link => {\r\n      link.classList.remove('active');\r\n    });\r\n    const activeLink = document.querySelector(`[data-tab=\"${tabName}\"]`);\r\n    if (activeLink) {\r\n      activeLink.classList.add('active');\r\n    }\r\n\r\n    // Update tab content\r\n    document.querySelectorAll('.options-section-content').forEach(content => {\r\n      (content as HTMLElement).style.display = 'none';\r\n    });\r\n    const activeTab = document.getElementById(`${tabName}-tab`);\r\n    if (activeTab) {\r\n      activeTab.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  private populateLanguageOptions(): void {\r\n    const languageSelect = document.getElementById('defaultLanguage') as HTMLSelectElement;\r\n    \r\n    // Group languages by category\r\n    const languageArray = Object.values(languageConfigs);\r\n    const categories = [...new Set(languageArray.map(lang => lang.category))];\r\n    \r\n    categories.forEach(category => {\r\n      const optgroup = document.createElement('optgroup');\r\n      optgroup.label = this.capitalizeFirst(category);\r\n      \r\n      const categoryLanguages = languageArray.filter(lang => lang.category === category);\r\n      categoryLanguages.forEach(language => {\r\n        const option = document.createElement('option');\r\n        option.value = language.id;\r\n        option.textContent = language.name;\r\n        optgroup.appendChild(option);\r\n      });\r\n      \r\n      languageSelect.appendChild(optgroup);\r\n    });\r\n  }\r\n\r\n  private setupTheme(): void {\r\n    const body = document.body;\r\n    body.className = `theme-${this.userPreferences.theme}`;\r\n    \r\n    // Update theme toggle icon\r\n    const themeIcon = this.themeToggle.querySelector('.theme-icon') as SVGElement;\r\n    if (this.userPreferences.theme === 'dark') {\r\n      themeIcon.innerHTML = `\r\n        <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"/>\r\n      `;\r\n    } else {\r\n      themeIcon.innerHTML = `\r\n        <circle cx=\"12\" cy=\"12\" r=\"5\"/>\r\n        <path d=\"M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42\"/>\r\n      `;\r\n    }\r\n  }\r\n\r\n  private toggleTheme(): void {\r\n    // Toggle between light and dark themes only\r\n    this.userPreferences.theme = this.userPreferences.theme === 'light' ? 'dark' : 'light';\r\n    this.setupTheme();\r\n    this.hasUnsavedChanges = true;\r\n  }\r\n\r\n  private async loadUserPreferences(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(STORAGE_KEYS.USER_PREFERENCES);\r\n      if (result[STORAGE_KEYS.USER_PREFERENCES]) {\r\n        this.userPreferences = { ...this.userPreferences, ...result[STORAGE_KEYS.USER_PREFERENCES] };\r\n      }\r\n      this.populateForm();\r\n    } catch (error) {\r\n      console.error('Error loading user preferences:', error);\r\n      this.showToast('Failed to load settings', 'error');\r\n    }\r\n  }\r\n\r\n  private populateForm(): void {\r\n    // Populate form fields with current preferences\r\n    const fields = [\r\n      'defaultLanguage',\r\n      'defaultAuthor',\r\n      'defaultProject',\r\n      'defaultLicense',\r\n      'exportFormat',\r\n      'theme'\r\n    ];\r\n\r\n    fields.forEach(field => {\r\n      const element = document.getElementById(field) as HTMLInputElement | HTMLSelectElement;\r\n      if (element && this.userPreferences[field as keyof UserPreferences]) {\r\n        element.value = this.userPreferences[field as keyof UserPreferences] as string;\r\n      }\r\n    });\r\n\r\n    // Handle checkboxes\r\n    const checkboxes = [\r\n      'autoFillDates',\r\n      'rememberLastValues',\r\n      'showPreview',\r\n      'enableAnalytics',\r\n      'enableBetaFeatures'\r\n    ];\r\n\r\n    checkboxes.forEach(checkbox => {\r\n      const element = document.getElementById(checkbox) as HTMLInputElement;\r\n      if (element) {\r\n        element.checked = this.userPreferences[checkbox as keyof UserPreferences] as boolean;\r\n      }\r\n    });\r\n  }\r\n\r\n  private getFormData(): UserPreferences {\r\n    const formData = new FormData(this.form);\r\n    \r\n    return {\r\n      theme: formData.get('theme') as Theme || 'light',\r\n      defaultLanguage: (document.getElementById('defaultLanguage') as HTMLSelectElement).value || DEFAULT_VALUES.LANGUAGE,\r\n      defaultAuthor: (document.getElementById('defaultAuthor') as HTMLInputElement).value || DEFAULT_VALUES.AUTHOR,\r\n      defaultProject: (document.getElementById('defaultProject') as HTMLInputElement).value || DEFAULT_VALUES.PROJECT,\r\n      defaultLicense: (document.getElementById('defaultLicense') as HTMLSelectElement).value || DEFAULT_VALUES.LICENSE,\r\n      autoFillDates: (document.getElementById('autoFillDates') as HTMLInputElement).checked,\r\n      rememberLastValues: (document.getElementById('rememberLastValues') as HTMLInputElement).checked,\r\n      exportFormat: (document.getElementById('exportFormat') as HTMLSelectElement).value as 'clipboard' | 'file' | 'insert' || DEFAULT_VALUES.EXPORT_FORMAT,\r\n      showPreview: (document.getElementById('showPreview') as HTMLInputElement).checked,\r\n      headerType: (document.getElementById('headerType') as HTMLSelectElement)?.value as 'simple' | 'complete' || 'simple',\r\n      enableAnalytics: (document.getElementById('enableAnalytics') as HTMLInputElement).checked,\r\n      enableBetaFeatures: (document.getElementById('enableBetaFeatures') as HTMLInputElement).checked\r\n    };\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    try {\r\n      this.userPreferences = this.getFormData();\r\n      \r\n      await chrome.storage.sync.set({\r\n        [STORAGE_KEYS.USER_PREFERENCES]: this.userPreferences\r\n      });\r\n\r\n      this.hasUnsavedChanges = false;\r\n      this.showToast(SUCCESS_MESSAGES.PREFERENCES_SAVED, 'success');\r\n      \r\n      // Update theme immediately\r\n      this.setupTheme();\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n      this.showToast(ERROR_MESSAGES.SAVE_ERROR, 'error');\r\n    }\r\n  }\r\n\r\n  private cancelChanges(): void {\r\n    if (this.hasUnsavedChanges) {\r\n      if (confirm('You have unsaved changes. Are you sure you want to cancel?')) {\r\n        this.loadUserPreferences();\r\n        this.hasUnsavedChanges = false;\r\n      }\r\n    } else {\r\n      window.close();\r\n    }\r\n  }\r\n\r\n  private async exportSettings(): Promise<void> {\r\n    try {\r\n      const settings = {\r\n        version: '1.0.0',\r\n        timestamp: new Date().toISOString(),\r\n        preferences: this.userPreferences\r\n      };\r\n\r\n      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `headforge-settings-${new Date().toISOString().split('T')[0]}.json`;\r\n      link.style.display = 'none';\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n      URL.revokeObjectURL(url);\r\n      \r\n      this.showToast('Settings exported successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error exporting settings:', error);\r\n      this.showToast('Failed to export settings', 'error');\r\n    }\r\n  }\r\n\r\n  private importSettings(): void {\r\n    this.importFile.click();\r\n  }\r\n\r\n  private async handleFileImport(event: Event): Promise<void> {\r\n    const target = event.target as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n    \r\n    if (!file) return;\r\n\r\n    try {\r\n      const text = await file.text();\r\n      const settings = JSON.parse(text);\r\n      \r\n      if (!settings.preferences) {\r\n        throw new Error('Invalid settings file format');\r\n      }\r\n\r\n      // Validate settings structure\r\n      const validPreferences = this.validateImportedSettings(settings.preferences);\r\n      \r\n      this.userPreferences = { ...this.userPreferences, ...validPreferences };\r\n      this.populateForm();\r\n      this.setupTheme();\r\n      this.hasUnsavedChanges = true;\r\n      \r\n      this.showToast('Settings imported successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error importing settings:', error);\r\n      this.showToast('Failed to import settings. Please check the file format.', 'error');\r\n    } finally {\r\n      // Reset file input\r\n      target.value = '';\r\n    }\r\n  }\r\n\r\n  private validateImportedSettings(settings: any): Partial<UserPreferences> {\r\n    const validSettings: Partial<UserPreferences> = {};\r\n    \r\n    // Validate each setting\r\n    if (typeof settings.theme === 'string' && ['light', 'dark'].includes(settings.theme)) {\r\n      validSettings.theme = settings.theme;\r\n    }\r\n    \r\n    if (typeof settings.defaultLanguage === 'string') {\r\n      validSettings.defaultLanguage = settings.defaultLanguage;\r\n    }\r\n    \r\n    if (typeof settings.defaultAuthor === 'string') {\r\n      validSettings.defaultAuthor = settings.defaultAuthor;\r\n    }\r\n    \r\n    if (typeof settings.defaultProject === 'string') {\r\n      validSettings.defaultProject = settings.defaultProject;\r\n    }\r\n    \r\n    if (typeof settings.defaultLicense === 'string') {\r\n      validSettings.defaultLicense = settings.defaultLicense;\r\n    }\r\n    \r\n    if (typeof settings.exportFormat === 'string' && ['clipboard', 'file', 'insert'].includes(settings.exportFormat)) {\r\n      validSettings.exportFormat = settings.exportFormat;\r\n    }\r\n    \r\n    if (typeof settings.autoFillDates === 'boolean') {\r\n      validSettings.autoFillDates = settings.autoFillDates;\r\n    }\r\n    \r\n    if (typeof settings.rememberLastValues === 'boolean') {\r\n      validSettings.rememberLastValues = settings.rememberLastValues;\r\n    }\r\n    \r\n    if (typeof settings.showPreview === 'boolean') {\r\n      validSettings.showPreview = settings.showPreview;\r\n    }\r\n    \r\n    if (typeof settings.enableAnalytics === 'boolean') {\r\n      validSettings.enableAnalytics = settings.enableAnalytics;\r\n    }\r\n    \r\n    if (typeof settings.enableBetaFeatures === 'boolean') {\r\n      validSettings.enableBetaFeatures = settings.enableBetaFeatures;\r\n    }\r\n    \r\n    return validSettings;\r\n  }\r\n\r\n  private async resetSettings(): Promise<void> {\r\n    if (confirm('Are you sure you want to reset all settings to their default values? This action cannot be undone.')) {\r\n      try {\r\n        this.userPreferences = this.getDefaultPreferences();\r\n        this.populateForm();\r\n        this.setupTheme();\r\n        this.hasUnsavedChanges = true;\r\n        \r\n        this.showToast('Settings reset to defaults', 'success');\r\n      } catch (error) {\r\n        console.error('Error resetting settings:', error);\r\n        this.showToast('Failed to reset settings', 'error');\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleKeyboardShortcuts(e: KeyboardEvent): void {\r\n    if (e.ctrlKey || e.metaKey) {\r\n      switch (e.key) {\r\n        case 's':\r\n          e.preventDefault();\r\n          this.saveSettings();\r\n          break;\r\n        case 'r':\r\n          e.preventDefault();\r\n          this.resetSettings();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private showToast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info'): void {\r\n    const toast = document.createElement('div');\r\n    toast.className = `toast ${type}`;\r\n    \r\n    const icon = this.getToastIcon(type);\r\n    toast.innerHTML = `\r\n      <svg class=\"toast-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n        ${icon}\r\n      </svg>\r\n      <div class=\"toast-content\">\r\n        <p class=\"toast-message\">${message}</p>\r\n      </div>\r\n      <button class=\"toast-close\" onclick=\"this.parentElement.remove()\">\r\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n        </svg>\r\n      </button>\r\n    `;\r\n    \r\n    this.toastContainer.appendChild(toast);\r\n    \r\n    // Auto-remove after 5 seconds\r\n    setTimeout(() => {\r\n      if (toast.parentElement) {\r\n        toast.remove();\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  private getToastIcon(type: string): string {\r\n    const icons = {\r\n      success: '<path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"/><polyline points=\"22,4 12,14.01 9,11.01\"/>',\r\n      error: '<circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/>',\r\n      warning: '<path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"/><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"/><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"/>',\r\n      info: '<circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"/><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"/>'\r\n    };\r\n    return icons[type as keyof typeof icons] || icons.info;\r\n  }\r\n\r\n  private getDefaultPreferences(): UserPreferences {\r\n    return {\r\n      theme: DEFAULT_VALUES.THEME,\r\n      defaultLanguage: DEFAULT_VALUES.LANGUAGE,\r\n      defaultAuthor: DEFAULT_VALUES.AUTHOR,\r\n      defaultProject: DEFAULT_VALUES.PROJECT,\r\n      defaultLicense: DEFAULT_VALUES.LICENSE,\r\n      autoFillDates: true,\r\n      rememberLastValues: true,\r\n      exportFormat: DEFAULT_VALUES.EXPORT_FORMAT,\r\n      showPreview: true,\r\n      headerType: 'simple',\r\n      enableAnalytics: false,\r\n      enableBetaFeatures: false\r\n    };\r\n  }\r\n\r\n  private capitalizeFirst(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n}\r\n\r\n// Initialize the options page when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new HeadForgeOptions();\r\n});\r\n"],"names":["languageConfigs","javascript","id","name","extension","commentStart","commentEnd","commentLine","template","category","typescript","python","templateComplete","java","csharp","cpp","c","go","rust","php","ruby","swift","kotlin","html","css","scss","jsx","tsx","sql","bash","powershell","yaml","json","xml","markdown","STORAGE_KEYS","DEFAULT_VALUES","ERROR_MESSAGES","SUCCESS_MESSAGES","DEFAULT_SETTINGS","theme","window","matchMedia","matches","fontSize","popupWidth","popupHeight","compactMode","showPreview","animations","highContrast","accentColor","debugMode","performanceMonitoring","cacheSize","maxHistory","autoSave","autoSaveDelay","experimentalFeatures","telemetry","updateFrequency","backupFrequency","strictValidation","timeoutDuration","maxRetries","defaultLicense","defaultLanguage","exportFormat","autoFillDates","rememberLastValues","defaultAuthor","defaultProject","autoDeactivateDuration","GeneralSettings","constructor","container","this","settings","getDefaultSettings","render","setupEventListeners","loadSettings","headerType","enableAnalytics","enableBetaFeatures","innerHTML","renderLanguageOptions","languageArray","Object","values","categories","Set","map","lang","options","forEach","capitalizeFirst","filter","language","selected","addEventListener","e","target","updateSetting","input","value","checked","result","chrome","storage","sync","get","updateFormValues","error","inputs","entries","querySelector","checkboxes","checkbox","getSettings","setSettings","str","charAt","toUpperCase","slice","AppearanceSettings","parseInt","extensionSettings","toString","TemplatesSettings","customTemplates","Map","loadCustomTemplates","renderBuiltInLanguages","renderCustomTemplates","languages","size","escapeHtml","substring","length","addBtn","addCustomTemplate","classList","contains","dataset","editBuiltInTemplate","previewBuiltInTemplate","editCustomTemplate","previewCustomTemplate","deleteCustomTemplate","exportBtn","importBtn","resetBtn","exportTemplates","importTemplates","resetTemplates","languageInput","trim","alert","has","getDefaultTemplate","set","saveCustomTemplates","showToast","languageId","openTemplateEditor","openTemplatePreview","confirm","delete","languageName","isCustom","modal","document","createElement","className","body","appendChild","closeBtn","cancelBtn","saveBtn","closeModal","removeChild","newTemplate","exportData","fromEntries","exportDate","Date","toISOString","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","link","href","download","split","style","display","click","revokeObjectURL","accept","file","files","reader","FileReader","onload","data","parse","readAsText","clear","toLocaleDateString","text","div","textContent","message","toast","cssText","backgroundColor","success","warning","info","setTimeout","parentElement","AdvancedSettings","initialize","bindEvents","local","saveSettings","showSuccessMessage","showErrorMessage","querySelectorAll","updateCheckboxSetting","updateNumberSetting","select","updateSelectSetting","bindActionButtons","clearCacheBtn","clearCache","clearHistoryBtn","clearHistory","exportSettings","importSettings","resetToDefaults","resetAllBtn","resetAllData","uninstallBtn","uninstallExtension","remove","dataStr","dataBlob","onchange","async","location","reload","management","uninstallSelf","showMessage","messageDiv","HeadForgeOptions","userPreferences","getDefaultPreferences","hasUnsavedChanges","initializeElements","initializeSettingsPages","loadUserPreferences","setupTheme","form","themeToggle","getElementById","importFile","toastContainer","generalContainer","appearanceContainer","templatesContainer","advancedContainer","generalSettings","appearanceSettings","templatesSettings","advancedSettings","preventDefault","tab","switchTab","toggleTheme","cancelChanges","resetSettings","handleFileImport","handleKeyboardShortcuts","returnValue","tabName","activeLink","add","content","activeTab","populateLanguageOptions","languageSelect","optgroup","label","option","themeIcon","populateForm","field","element","getFormData","FormData","close","version","timestamp","preferences","event","Error","validPreferences","validateImportedSettings","validSettings","includes","ctrlKey","metaKey","key","icon","getToastIcon","icons"],"sourceRoot":""}