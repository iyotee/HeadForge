(()=>{"use strict";const e={javascript:{id:"javascript",name:"JavaScript",extension:".js",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"web"},typescript:{id:"typescript",name:"TypeScript",extension:".ts",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"web"},python:{id:"python",name:"Python",extension:".py",commentStart:"#",commentEnd:"",commentLine:"#",template:'"""\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n"""',templateComplete:'"""\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n"""',category:"backend"},java:{id:"java",name:"Java",extension:".java",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},csharp:{id:"csharp",name:"C#",extension:".cs",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},cpp:{id:"cpp",name:"C++",extension:".cpp",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},c:{id:"c",name:"C",extension:".c",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},go:{id:"go",name:"Go",extension:".go",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},rust:{id:"rust",name:"Rust",extension:".rs",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},php:{id:"php",name:"PHP",extension:".php",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"backend"},ruby:{id:"ruby",name:"Ruby",extension:".rb",commentStart:"#",commentEnd:"",commentLine:"#",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",templateComplete:"=begin\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n=end",category:"backend"},swift:{id:"swift",name:"Swift",extension:".swift",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"mobile"},kotlin:{id:"kotlin",name:"Kotlin",extension:".kt",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"mobile"},html:{id:"html",name:"HTML",extension:".html",commentStart:"\x3c!--",commentEnd:"--\x3e",commentLine:"\x3c!--",template:"\x3c!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n--\x3e",templateComplete:"\x3c!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n--\x3e",category:"web"},css:{id:"css",name:"CSS",extension:".css",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/*\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"web"},scss:{id:"scss",name:"SCSS",extension:".scss",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/*\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"web"},jsx:{id:"jsx",name:"JSX",extension:".jsx",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"web"},tsx:{id:"tsx",name:"TSX",extension:".tsx",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",category:"web"},sql:{id:"sql",name:"SQL",extension:".sql",commentStart:"/*",commentEnd:"*/",commentLine:"--",template:"/*\n-- @author {{author}}\n-- @fileName {{fileName}}\n-- @projectName {{project}}\n-- @version {{version}}\n-- @description {{description}}\n-- @created {{creationDate}}\n-- @updated {{lastUpdated}}\n-- @license {{license}}\n-- @status {{status}}\n-- @usage {{usage}}\n-- @dependencies {{dependencies}}\n-- @notes {{notes}}\n-- @todo {{todo}}\n*/",category:"database"},bash:{id:"bash",name:"Bash",extension:".sh",commentStart:"#",commentEnd:"",commentLine:"#",template:"#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}",templateComplete:"#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}",category:"devops"},powershell:{id:"powershell",name:"PowerShell",extension:".ps1",commentStart:"#",commentEnd:"",commentLine:"#",template:"#!/bin/bash\n# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}",templateComplete:"# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}",category:"devops"},yaml:{id:"yaml",name:"YAML",extension:".yml",commentStart:"#",commentEnd:"",commentLine:"#",template:"# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}",templateComplete:"# @author {{author}}\n# @fileName {{fileName}}\n# @projectName {{project}}\n# @version {{version}}\n# @description {{description}}\n# @created {{creationDate}}\n# @updated {{lastUpdated}}\n# @license {{license}}\n# @status {{status}}\n# @usage {{usage}}\n# @dependencies {{dependencies}}\n# @notes {{notes}}\n# @todo {{todo}}",category:"devops"},json:{id:"json",name:"JSON",extension:".json",commentStart:"/*",commentEnd:"*/",commentLine:"*",template:'{\n  "_header": {\n    "author": "{{author}}",\n    "fileName": "{{fileName}}",\n    "projectName": "{{project}}",\n    "version": "{{version}}",\n    "description": "{{description}}",\n    "created": "{{creationDate}}",\n    "updated": "{{lastUpdated}}",\n    "license": "{{license}}",\n    "status": "{{status}}",\n    "usage": "{{usage}}",\n    "dependencies": "{{dependencies}}",\n    "notes": "{{notes}}",\n    "todo": "{{todo}}"\n  }\n}',category:"other"},xml:{id:"xml",name:"XML",extension:".xml",commentStart:"\x3c!--",commentEnd:"--\x3e",commentLine:"\x3c!--",template:"\x3c!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n--\x3e",templateComplete:"\x3c!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n--\x3e",category:"other"},markdown:{id:"markdown",name:"Markdown",extension:".md",commentStart:"\x3c!--",commentEnd:"--\x3e",commentLine:"\x3c!--",template:"/**\n * @author {{author}}\n * @fileName {{fileName}}\n * @projectName {{project}}\n * @version {{version}}\n * @description {{description}}\n * @created {{creationDate}}\n * @updated {{lastUpdated}}\n * @license {{license}}\n * @status {{status}}\n * @usage {{usage}}\n * @dependencies {{dependencies}}\n * @notes {{notes}}\n * @todo {{todo}}\n */",templateComplete:"\x3c!--\n@author {{author}}\n@fileName {{fileName}}\n@projectName {{project}}\n@version {{version}}\n@description {{description}}\n@created {{creationDate}}\n@updated {{lastUpdated}}\n@license {{license}}\n@status {{status}}\n@usage {{usage}}\n@dependencies {{dependencies}}\n@notes {{notes}}\n@todo {{todo}}\n--\x3e",category:"other"}};const t="headforge_user_preferences",n="Satoshiba",s="SYNCLY - YouTube PVR Extension",a="MIT",i="javascript",o="light",c="clipboard",r="Failed to save preferences",l="Preferences saved successfully",d={theme:"undefined"!=typeof window&&window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light",fontSize:"medium",popupWidth:400,popupHeight:600,compactMode:!1,showPreview:!0,animations:!0,highContrast:!1,accentColor:"#007bff",debugMode:!1,performanceMonitoring:!1,cacheSize:10,maxHistory:100,autoSave:!0,autoSaveDelay:1e3,experimentalFeatures:!1,telemetry:!1,updateFrequency:"weekly",backupFrequency:"monthly",strictValidation:!1,timeoutDuration:5e3,maxRetries:3,defaultLicense:"MIT",defaultLanguage:"javascript",exportFormat:"clipboard",autoFillDates:!0,rememberLastValues:!0,defaultAuthor:"",defaultProject:"",autoDeactivateDuration:18e4};class p{constructor(e){this.container=e,this.settings=this.getDefaultSettings(),this.render(),this.setupEventListeners(),this.loadSettings()}getDefaultSettings(){return{theme:o,defaultLanguage:i,defaultAuthor:n,defaultProject:s,defaultLicense:a,autoFillDates:!0,rememberLastValues:!0,exportFormat:c,showPreview:!0,headerType:"simple",enableAnalytics:!1,enableBetaFeatures:!1}}render(){this.container.innerHTML=`\n      <div class="settings-grid">\n        <div class="setting-group">\n          <label for="default-author">Default Author</label>\n          <input type="text" id="default-author" class="form-input" placeholder="Your Name" value="${this.settings.defaultAuthor}">\n          <p class="setting-description">Default author name for new headers</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="default-project">Default Project</label>\n          <input type="text" id="default-project" class="form-input" placeholder="Project Name" value="${this.settings.defaultProject}">\n          <p class="setting-description">Default project name for new headers</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="default-language">Default Language</label>\n          <select id="default-language" class="form-input">\n            ${this.renderLanguageOptions()}\n          </select>\n          <p class="setting-description">Default programming language for new headers</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="default-license">Default License</label>\n          <select id="default-license" class="form-input">\n            <option value="MIT" ${"MIT"===this.settings.defaultLicense?"selected":""}>MIT</option>\n            <option value="Apache-2.0" ${"Apache-2.0"===this.settings.defaultLicense?"selected":""}>Apache 2.0</option>\n            <option value="GPL-3.0" ${"GPL-3.0"===this.settings.defaultLicense?"selected":""}>GPL 3.0</option>\n            <option value="BSD-3-Clause" ${"BSD-3-Clause"===this.settings.defaultLicense?"selected":""}>BSD 3-Clause</option>\n            <option value="ISC" ${"ISC"===this.settings.defaultLicense?"selected":""}>ISC</option>\n            <option value="Unlicense" ${"Unlicense"===this.settings.defaultLicense?"selected":""}>Unlicense</option>\n          </select>\n          <p class="setting-description">Default license for new headers</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="export-format">Export Format</label>\n          <select id="export-format" class="form-input">\n            <option value="clipboard" ${"clipboard"===this.settings.exportFormat?"selected":""}>Copy to Clipboard</option>\n            <option value="file" ${"file"===this.settings.exportFormat?"selected":""}>Download File</option>\n            <option value="insert" ${"insert"===this.settings.exportFormat?"selected":""}>Insert into Editor</option>\n          </select>\n          <p class="setting-description">Default export method for generated headers</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="auto-fill-dates" ${this.settings.autoFillDates?"checked":""}>\n            <span class="checkmark"></span>\n            Auto-fill Dates\n          </label>\n          <p class="setting-description">Automatically fill creation and update dates</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="remember-last-values" ${this.settings.rememberLastValues?"checked":""}>\n            <span class="checkmark"></span>\n            Remember Last Values\n          </label>\n          <p class="setting-description">Remember form values between sessions</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="show-preview" ${this.settings.showPreview?"checked":""}>\n            <span class="checkmark"></span>\n            Show Preview\n          </label>\n          <p class="setting-description">Show live preview of generated headers</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="enable-analytics" ${this.settings.enableAnalytics?"checked":""}>\n            <span class="checkmark"></span>\n            Enable Analytics\n          </label>\n          <p class="setting-description">Help improve HeadForge by sharing anonymous usage data</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="enable-beta-features" ${this.settings.enableBetaFeatures?"checked":""}>\n            <span class="checkmark"></span>\n            Enable Beta Features\n          </label>\n          <p class="setting-description">Access experimental features (may be unstable)</p>\n        </div>\n      </div>\n    `}renderLanguageOptions(){const t=Object.values(e),n=[...new Set(t.map(e=>e.category))];let s="";return n.forEach(e=>{s+=`<optgroup label="${this.capitalizeFirst(e)}">`;t.filter(t=>t.category===e).forEach(e=>{const t=this.settings.defaultLanguage===e.id?"selected":"";s+=`<option value="${e.id}" ${t}>${e.name}</option>`}),s+="</optgroup>"}),s}setupEventListeners(){this.container.addEventListener("input",e=>{const t=e.target;this.updateSetting(t)}),this.container.addEventListener("change",e=>{const t=e.target;this.updateSetting(t)})}updateSetting(e){switch(e.id){case"default-author":this.settings.defaultAuthor=e.value;break;case"default-project":this.settings.defaultProject=e.value;break;case"default-language":this.settings.defaultLanguage=e.value;break;case"default-license":this.settings.defaultLicense=e.value;break;case"export-format":this.settings.exportFormat=e.value;break;case"auto-fill-dates":this.settings.autoFillDates=e.checked;break;case"remember-last-values":this.settings.rememberLastValues=e.checked;break;case"show-preview":this.settings.showPreview=e.checked;break;case"enable-analytics":this.settings.enableAnalytics=e.checked;break;case"enable-beta-features":this.settings.enableBetaFeatures=e.checked}}async loadSettings(){try{const e=await chrome.storage.sync.get(t);e[t]&&(this.settings={...this.settings,...e[t]},this.updateFormValues())}catch(e){}}updateFormValues(){const e={"default-author":this.settings.defaultAuthor,"default-project":this.settings.defaultProject,"default-language":this.settings.defaultLanguage,"default-license":this.settings.defaultLicense,"export-format":this.settings.exportFormat};Object.entries(e).forEach(([e,t])=>{const n=this.container.querySelector(`#${e}`);n&&(n.value=t)});const t={"auto-fill-dates":this.settings.autoFillDates,"remember-last-values":this.settings.rememberLastValues,"show-preview":this.settings.showPreview,"enable-analytics":this.settings.enableAnalytics,"enable-beta-features":this.settings.enableBetaFeatures};Object.entries(t).forEach(([e,t])=>{const n=this.container.querySelector(`#${e}`);n&&(n.checked=t??!1)})}getSettings(){return{...this.settings}}setSettings(e){this.settings={...e},this.updateFormValues()}capitalizeFirst(e){return e.charAt(0).toUpperCase()+e.slice(1)}}class u{constructor(e){this.container=e,this.settings=this.getDefaultSettings(),this.render(),this.setupEventListeners(),this.loadSettings()}getDefaultSettings(){return{...d,theme:window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}}render(){this.container.innerHTML=`\n      <div class="settings-grid">\n        <div class="setting-group">\n          <label for="theme-select">Theme</label>\n          <select id="theme-select" class="form-input">\n            <option value="light" ${"light"===this.settings.theme?"selected":""}>Light</option>\n            <option value="dark" ${"dark"===this.settings.theme?"selected":""}>Dark</option>\n          </select>\n          <p class="setting-description">Choose your preferred theme or let it follow your system preference</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="font-size">Font Size</label>\n          <select id="font-size" class="form-input">\n            <option value="small" ${"small"===this.settings.fontSize?"selected":""}>Small</option>\n            <option value="medium" ${"medium"===this.settings.fontSize?"selected":""}>Medium</option>\n            <option value="large" ${"large"===this.settings.fontSize?"selected":""}>Large</option>\n          </select>\n          <p class="setting-description">Adjust the font size for better readability</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="popup-width">Popup Width (px)</label>\n          <input type="number" id="popup-width" class="form-input" min="300" max="600" step="10" value="${this.settings.popupWidth}">\n          <p class="setting-description">Width of the extension popup window</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="popup-height">Popup Height (px)</label>\n          <input type="number" id="popup-height" class="form-input" min="400" max="800" step="10" value="${this.settings.popupHeight}">\n          <p class="setting-description">Height of the extension popup window</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="accent-color">Accent Color</label>\n          <input type="color" id="accent-color" class="form-input" value="${this.settings.accentColor}">\n          <p class="setting-description">Primary color used throughout the interface</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="compact-mode" ${this.settings.compactMode?"checked":""}>\n            <span class="checkmark"></span>\n            Compact Mode\n          </label>\n          <p class="setting-description">Use a more compact layout with reduced spacing</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="animations" ${this.settings.animations?"checked":""}>\n            <span class="checkmark"></span>\n            Enable Animations\n          </label>\n          <p class="setting-description">Enable smooth transitions and animations</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="high-contrast" ${this.settings.highContrast?"checked":""}>\n            <span class="checkmark"></span>\n            High Contrast\n          </label>\n          <p class="setting-description">Increase contrast for better accessibility</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="debug-mode" ${this.settings.debugMode?"checked":""}>\n            <span class="checkmark"></span>\n            Debug Mode\n          </label>\n          <p class="setting-description">Show additional debug information and console logs</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="performance-monitoring" ${this.settings.performanceMonitoring?"checked":""}>\n            <span class="checkmark"></span>\n            Performance Monitoring\n          </label>\n          <p class="setting-description">Monitor and log performance metrics</p>\n        </div>\n      </div>\n    `}setupEventListeners(){this.container.addEventListener("input",e=>{const t=e.target;this.updateSetting(t)}),this.container.addEventListener("change",e=>{const t=e.target;this.updateSetting(t)})}updateSetting(e){switch(e.id){case"theme-select":this.settings.theme=e.value;break;case"font-size":this.settings.fontSize=e.value;break;case"popup-width":this.settings.popupWidth=parseInt(e.value);break;case"popup-height":this.settings.popupHeight=parseInt(e.value);break;case"accent-color":this.settings.accentColor=e.value;break;case"compact-mode":this.settings.compactMode=e.checked;break;case"animations":this.settings.animations=e.checked;break;case"high-contrast":this.settings.highContrast=e.checked;break;case"debug-mode":this.settings.debugMode=e.checked;break;case"performance-monitoring":this.settings.performanceMonitoring=e.checked}}async loadSettings(){try{const e=await chrome.storage.sync.get(["extensionSettings"]);e.extensionSettings&&(this.settings={...this.settings,...e.extensionSettings},this.updateFormValues())}catch(e){}}updateFormValues(){const e={"theme-select":this.settings.theme,"font-size":this.settings.fontSize,"popup-width":this.settings.popupWidth,"popup-height":this.settings.popupHeight,"accent-color":this.settings.accentColor};Object.entries(e).forEach(([e,t])=>{const n=this.container.querySelector(`#${e}`);n&&(n.value=t.toString())});const t={"compact-mode":this.settings.compactMode,animations:this.settings.animations,"high-contrast":this.settings.highContrast,"debug-mode":this.settings.debugMode,"performance-monitoring":this.settings.performanceMonitoring};Object.entries(t).forEach(([e,t])=>{const n=this.container.querySelector(`#${e}`);n&&(n.checked=t)})}getSettings(){return{...this.settings}}setSettings(e){this.settings={...e},this.updateFormValues()}}class m{constructor(e){this.customTemplates=new Map,this.container=e,this.loadCustomTemplates(),this.render(),this.setupEventListeners()}render(){this.container.innerHTML=`\n      <div class="templates-settings">\n        <div class="setting-group">\n          <h3>Built-in Languages</h3>\n          <p class="setting-description">Manage built-in programming language templates</p>\n          <div class="languages-grid">\n            ${this.renderBuiltInLanguages()}\n          </div>\n        </div>\n\n        <div class="setting-group">\n          <h3>Custom Templates</h3>\n          <p class="setting-description">Add or modify custom header templates</p>\n          <div class="custom-templates-container">\n            <div class="add-template-section">\n              <input type="text" id="new-template-language" class="form-input" placeholder="Language name (e.g., Python, Go)">\n              <button id="add-template-btn" class="btn btn-primary">Add Template</button>\n            </div>\n            <div id="custom-templates-list" class="custom-templates-list">\n              ${this.renderCustomTemplates()}\n            </div>\n          </div>\n        </div>\n\n        <div class="setting-group">\n          <h3>Template Actions</h3>\n          <div class="template-actions">\n            <button id="export-templates" class="btn btn-secondary">Export Templates</button>\n            <button id="import-templates" class="btn btn-secondary">Import Templates</button>\n            <button id="reset-templates" class="btn btn-danger">Reset to Defaults</button>\n          </div>\n        </div>\n      </div>\n    `}renderBuiltInLanguages(){const t=Object.values(e),n=[...new Set(t.map(e=>e.category))];let s="";return n.forEach(e=>{s+='<div class="language-category">',s+=`<h4>${this.capitalizeFirst(e)}</h4>`;t.filter(t=>t.category===e).forEach(e=>{s+=`\n          <div class="language-item" data-language="${e.id}">\n            <div class="language-info">\n              <strong>${e.name}</strong>\n              <span class="language-extensions">${e.extension}</span>\n            </div>\n            <div class="language-actions">\n              <button class="btn btn-sm btn-outline edit-template" data-language="${e.id}">\n                Edit\n              </button>\n              <button class="btn btn-sm btn-outline preview-template" data-language="${e.id}">\n                Preview\n              </button>\n            </div>\n          </div>\n        `}),s+="</div>"}),s}renderCustomTemplates(){if(0===this.customTemplates.size)return'<p class="no-templates">No custom templates yet. Add one above!</p>';let e="";return this.customTemplates.forEach((t,n)=>{e+=`\n        <div class="custom-template-item" data-language="${n}">\n          <div class="template-header">\n            <strong>${n}</strong>\n            <div class="template-actions">\n              <button class="btn btn-sm btn-outline edit-custom-template" data-language="${n}">\n                Edit\n              </button>\n              <button class="btn btn-sm btn-outline preview-custom-template" data-language="${n}">\n                Preview\n              </button>\n              <button class="btn btn-sm btn-danger delete-custom-template" data-language="${n}">\n                Delete\n              </button>\n            </div>\n          </div>\n          <div class="template-preview">\n            <pre><code>${this.escapeHtml(t.substring(0,200))}${t.length>200?"...":""}</code></pre>\n          </div>\n        </div>\n      `}),e}setupEventListeners(){const e=this.container.querySelector("#add-template-btn");e&&e.addEventListener("click",()=>this.addCustomTemplate()),this.container.addEventListener("click",e=>{const t=e.target;if(t.classList.contains("edit-template")){const e=t.dataset.language;e&&this.editBuiltInTemplate(e)}if(t.classList.contains("preview-template")){const e=t.dataset.language;e&&this.previewBuiltInTemplate(e)}if(t.classList.contains("edit-custom-template")){const e=t.dataset.language;e&&this.editCustomTemplate(e)}if(t.classList.contains("preview-custom-template")){const e=t.dataset.language;e&&this.previewCustomTemplate(e)}if(t.classList.contains("delete-custom-template")){const e=t.dataset.language;e&&this.deleteCustomTemplate(e)}});const t=this.container.querySelector("#export-templates"),n=this.container.querySelector("#import-templates"),s=this.container.querySelector("#reset-templates");t&&t.addEventListener("click",()=>this.exportTemplates()),n&&n.addEventListener("click",()=>this.importTemplates()),s&&s.addEventListener("click",()=>this.resetTemplates())}addCustomTemplate(){const t=this.container.querySelector("#new-template-language"),n=t.value.trim();if(!n)return void alert("Please enter a language name");if(this.customTemplates.has(n)||e[n])return void alert("A template for this language already exists");const s=this.getDefaultTemplate(n);this.customTemplates.set(n,s),this.saveCustomTemplates(),this.render(),this.setupEventListeners(),t.value="",this.showToast(`Template for ${n} added successfully`,"success")}editBuiltInTemplate(t){const n=e[t];n&&this.openTemplateEditor(n.name,n.template,t,!1)}editCustomTemplate(e){const t=this.customTemplates.get(e);t&&this.openTemplateEditor(e,t,e,!0)}previewBuiltInTemplate(t){const n=e[t];n&&this.openTemplatePreview(n.name,n.template)}previewCustomTemplate(e){const t=this.customTemplates.get(e);t&&this.openTemplatePreview(e,t)}deleteCustomTemplate(e){confirm(`Are you sure you want to delete the template for ${e}?`)&&(this.customTemplates.delete(e),this.saveCustomTemplates(),this.render(),this.setupEventListeners(),this.showToast(`Template for ${e} deleted`,"info"))}openTemplateEditor(e,t,n,s){const a=document.createElement("div");a.className="template-editor-modal",a.innerHTML=`\n      <div class="modal-content">\n        <div class="modal-header">\n          <h3>Edit ${e} Template</h3>\n          <button class="modal-close">&times;</button>\n        </div>\n        <div class="modal-body">\n          <textarea id="template-editor" class="template-textarea" placeholder="Enter your template here...">${this.escapeHtml(t)}</textarea>\n          <div class="template-variables">\n            <h4>Available Variables:</h4>\n            <ul>\n              <li><code>{{fileName}}</code> - File name</li>\n              <li><code>{{project}}</code> - Project name</li>\n              <li><code>{{author}}</code> - Author name</li>\n              <li><code>{{description}}</code> - File description</li>\n              <li><code>{{creationDate}}</code> - Creation date</li>\n              <li><code>{{lastUpdated}}</code> - Last updated date</li>\n              <li><code>{{license}}</code> - License</li>\n              <li><code>{{version}}</code> - Version</li>\n            </ul>\n          </div>\n        </div>\n        <div class="modal-footer">\n          <button class="btn btn-secondary modal-cancel">Cancel</button>\n          <button class="btn btn-primary modal-save">Save Template</button>\n        </div>\n      </div>\n    `,document.body.appendChild(a);const i=a.querySelector(".modal-close"),o=a.querySelector(".modal-cancel"),c=a.querySelector(".modal-save"),r=()=>{document.body.removeChild(a)};i?.addEventListener("click",r),o?.addEventListener("click",r),c?.addEventListener("click",()=>{const e=a.querySelector("#template-editor").value;s?(this.customTemplates.set(n,e),this.saveCustomTemplates()):this.showToast("Built-in templates cannot be modified directly. Consider creating a custom template instead.","warning"),r(),this.render(),this.setupEventListeners()}),a.addEventListener("click",e=>{e.target===a&&r()})}openTemplatePreview(e,t){const n=document.createElement("div");n.className="template-preview-modal",n.innerHTML=`\n      <div class="modal-content">\n        <div class="modal-header">\n          <h3>${e} Template Preview</h3>\n          <button class="modal-close">&times;</button>\n        </div>\n        <div class="modal-body">\n          <pre><code>${this.escapeHtml(t)}</code></pre>\n        </div>\n        <div class="modal-footer">\n          <button class="btn btn-primary modal-close">Close</button>\n        </div>\n      </div>\n    `,document.body.appendChild(n);const s=n.querySelector(".modal-close");s?.addEventListener("click",()=>{document.body.removeChild(n)}),n.addEventListener("click",e=>{e.target===n&&document.body.removeChild(n)})}exportTemplates(){const e={customTemplates:Object.fromEntries(this.customTemplates),exportDate:(new Date).toISOString()},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),s=document.createElement("a");s.href=n,s.download=`headforge-templates-${(new Date).toISOString().split("T")[0]}.json`,s.style.display="none",document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(n),this.showToast("Templates exported successfully","success")}importTemplates(){const e=document.createElement("input");e.type="file",e.accept=".json",e.addEventListener("change",e=>{const t=e.target.files?.[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{const t=JSON.parse(e.target?.result);t.customTemplates&&(this.customTemplates=new Map(Object.entries(t.customTemplates)),this.saveCustomTemplates(),this.render(),this.setupEventListeners(),this.showToast("Templates imported successfully","success"))}catch(e){this.showToast("Failed to import templates. Please check the file format.","error")}},n.readAsText(t)}),e.click()}resetTemplates(){confirm("Are you sure you want to reset all custom templates? This action cannot be undone.")&&(this.customTemplates.clear(),this.saveCustomTemplates(),this.render(),this.setupEventListeners(),this.showToast("Custom templates reset successfully","info"))}getDefaultTemplate(e){return`/**\n * @fileoverview ${e} file template\n * @author Your Name\n * @created ${(new Date).toLocaleDateString()}\n */\n\n// Your code here\n`}async loadCustomTemplates(){try{const e=await chrome.storage.sync.get(["customTemplates"]);e.customTemplates&&(this.customTemplates=new Map(Object.entries(e.customTemplates)))}catch(e){}}async saveCustomTemplates(){try{await chrome.storage.sync.set({customTemplates:Object.fromEntries(this.customTemplates)})}catch(e){}}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}capitalizeFirst(e){return e.charAt(0).toUpperCase()+e.slice(1)}showToast(e,t="info"){const n=document.createElement("div");n.className=`toast toast-${t}`,n.textContent=e,n.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      padding: 12px 20px;\n      border-radius: 4px;\n      color: white;\n      z-index: 10000;\n      font-weight: 500;\n    ";n.style.backgroundColor={success:"#10b981",error:"#ef4444",warning:"#f59e0b",info:"#3b82f6"}[t],document.body.appendChild(n),setTimeout(()=>{n.parentElement&&document.body.removeChild(n)},3e3)}}class h{constructor(e){this.container=e,this.settings={...d},this.initialize()}async initialize(){await this.loadSettings(),this.render(),this.bindEvents()}async loadSettings(){try{const e=await chrome.storage.local.get(["extensionSettings"]);e.extensionSettings&&(this.settings={...d,...e.extensionSettings})}catch(e){}}async saveSettings(){try{await chrome.storage.local.set({extensionSettings:this.settings}),this.showSuccessMessage("Settings saved successfully!")}catch(e){this.showErrorMessage("Failed to save settings")}}render(){this.container.innerHTML=`\n      <div class="settings-section">\n        <h2>Advanced Settings</h2>\n        \n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="debug-mode" ${this.settings.debugMode?"checked":""}>\n            <span class="checkmark"></span>\n            Debug Mode\n          </label>\n          <p class="setting-description">Enable debug logging and additional console output.</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="performance-monitoring" ${this.settings.performanceMonitoring?"checked":""}>\n            <span class="checkmark"></span>\n            Performance Monitoring\n          </label>\n          <p class="setting-description">Monitor and log performance metrics.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="cache-size">Cache Size (MB)</label>\n          <input type="number" id="cache-size" class="form-input" min="1" max="100" value="${this.settings.cacheSize}">\n          <p class="setting-description">Maximum cache size for storing generated headers.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="max-history">Max History Items</label>\n          <input type="number" id="max-history" class="form-input" min="10" max="1000" value="${this.settings.maxHistory}">\n          <p class="setting-description">Maximum number of history items to keep.</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="auto-save" ${this.settings.autoSave?"checked":""}>\n            <span class="checkmark"></span>\n            Auto Save\n          </label>\n          <p class="setting-description">Automatically save form data as you type.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="auto-save-delay">Auto Save Delay (ms)</label>\n          <input type="number" id="auto-save-delay" class="form-input" min="500" max="10000" step="500" value="${this.settings.autoSaveDelay}">\n          <p class="setting-description">Delay before auto-saving form data.</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="experimental-features" ${this.settings.experimentalFeatures?"checked":""}>\n            <span class="checkmark"></span>\n            Experimental Features\n          </label>\n          <p class="setting-description">Enable experimental and beta features.</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="telemetry" ${this.settings.telemetry?"checked":""}>\n            <span class="checkmark"></span>\n            Anonymous Usage Analytics\n          </label>\n          <p class="setting-description">Help improve HeadForge by sharing anonymous usage data.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="update-frequency">Update Check Frequency</label>\n          <select id="update-frequency" class="form-select">\n            <option value="daily" ${"daily"===this.settings.updateFrequency?"selected":""}>Daily</option>\n            <option value="weekly" ${"weekly"===this.settings.updateFrequency?"selected":""}>Weekly</option>\n            <option value="monthly" ${"monthly"===this.settings.updateFrequency?"selected":""}>Monthly</option>\n            <option value="never" ${"never"===this.settings.updateFrequency?"selected":""}>Never</option>\n          </select>\n          <p class="setting-description">How often to check for extension updates.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="backup-frequency">Backup Frequency</label>\n          <select id="backup-frequency" class="form-select">\n            <option value="daily" ${"daily"===this.settings.backupFrequency?"selected":""}>Daily</option>\n            <option value="weekly" ${"weekly"===this.settings.backupFrequency?"selected":""}>Weekly</option>\n            <option value="monthly" ${"monthly"===this.settings.backupFrequency?"selected":""}>Monthly</option>\n            <option value="never" ${"never"===this.settings.backupFrequency?"selected":""}>Never</option>\n          </select>\n          <p class="setting-description">How often to backup your settings and data.</p>\n        </div>\n\n        <div class="setting-group">\n          <label class="form-checkbox">\n            <input type="checkbox" id="strict-validation" ${this.settings.strictValidation?"checked":""}>\n            <span class="checkmark"></span>\n            Strict Validation\n          </label>\n          <p class="setting-description">Enable strict validation for all form inputs.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="timeout-duration">Request Timeout (ms)</label>\n          <input type="number" id="timeout-duration" class="form-input" min="1000" max="30000" step="1000" value="${this.settings.timeoutDuration}">\n          <p class="setting-description">Timeout duration for extension operations.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="max-retries">Max Retries</label>\n          <input type="number" id="max-retries" class="form-input" min="0" max="10" value="${this.settings.maxRetries}">\n          <p class="setting-description">Maximum number of retries for failed operations.</p>\n        </div>\n\n        <div class="setting-group">\n          <label for="auto-deactivate-duration">Dev Mode Auto-Deactivation (minutes)</label>\n          <input type="number" id="auto-deactivate-duration" class="form-input" min="1" max="60" value="${this.settings.autoDeactivateDuration/6e4}">\n          <p class="setting-description">How long before Dev Mode automatically deactivates (1-60 minutes).</p>\n        </div>\n\n        <div class="setting-actions">\n          <button type="button" id="clear-cache" class="btn btn-warning">Clear Cache</button>\n          <button type="button" id="clear-history" class="btn btn-warning">Clear History</button>\n          <button type="button" id="export-settings" class="btn btn-secondary">Export Settings</button>\n          <button type="button" id="import-settings" class="btn btn-secondary">Import Settings</button>\n          <button type="button" id="reset-advanced" class="btn btn-danger">Reset to Defaults</button>\n          <button type="button" id="save-advanced" class="btn btn-primary">Save Settings</button>\n        </div>\n\n        <div class="danger-zone">\n          <h3>Danger Zone</h3>\n          <p>These actions cannot be undone. Please proceed with caution.</p>\n          \n          <div class="setting-actions">\n            <button type="button" id="reset-all-data" class="btn btn-danger">Reset All Data</button>\n            <button type="button" id="uninstall-extension" class="btn btn-danger">Uninstall Extension</button>\n          </div>\n        </div>\n      </div>\n    `}bindEvents(){this.container.querySelectorAll('input[type="checkbox"]').forEach(e=>{e.addEventListener("change",e=>{const t=e.target;this.updateCheckboxSetting(t)})});this.container.querySelectorAll('input[type="number"]').forEach(e=>{e.addEventListener("change",e=>{const t=e.target;this.updateNumberSetting(t)})});this.container.querySelectorAll("select").forEach(e=>{e.addEventListener("change",e=>{const t=e.target;this.updateSelectSetting(t)})}),this.bindActionButtons()}updateCheckboxSetting(e){switch(e.id){case"debug-mode":this.settings.debugMode=e.checked;break;case"performance-monitoring":this.settings.performanceMonitoring=e.checked;break;case"auto-save":this.settings.autoSave=e.checked;break;case"experimental-features":this.settings.experimentalFeatures=e.checked;break;case"telemetry":this.settings.telemetry=e.checked;break;case"strict-validation":this.settings.strictValidation=e.checked}}updateNumberSetting(e){const t=e.id,n=parseInt(e.value);switch(t){case"cache-size":this.settings.cacheSize=n;break;case"max-history":this.settings.maxHistory=n;break;case"auto-save-delay":this.settings.autoSaveDelay=n;break;case"timeout-duration":this.settings.timeoutDuration=n;break;case"max-retries":this.settings.maxRetries=n;break;case"auto-deactivate-duration":this.settings.autoDeactivateDuration=6e4*n}}updateSelectSetting(e){const t=e.id,n=e.value;switch(t){case"update-frequency":this.settings.updateFrequency=n;break;case"backup-frequency":this.settings.backupFrequency=n}}bindActionButtons(){const e=this.container.querySelector("#clear-cache");e?.addEventListener("click",()=>this.clearCache());const t=this.container.querySelector("#clear-history");t?.addEventListener("click",()=>this.clearHistory());const n=this.container.querySelector("#export-settings");n?.addEventListener("click",()=>this.exportSettings());const s=this.container.querySelector("#import-settings");s?.addEventListener("click",()=>this.importSettings());const a=this.container.querySelector("#reset-advanced");a?.addEventListener("click",()=>this.resetToDefaults());const i=this.container.querySelector("#save-advanced");i?.addEventListener("click",()=>this.saveSettings());const o=this.container.querySelector("#reset-all-data");o?.addEventListener("click",()=>this.resetAllData());const c=this.container.querySelector("#uninstall-extension");c?.addEventListener("click",()=>this.uninstallExtension())}async clearCache(){if(confirm("Are you sure you want to clear the cache? This will remove all cached data."))try{await chrome.storage.local.remove(["cache","generatedHeaders"]),this.showSuccessMessage("Cache cleared successfully!")}catch(e){this.showErrorMessage("Failed to clear cache")}}async clearHistory(){if(confirm("Are you sure you want to clear the history? This will remove all history items."))try{await chrome.storage.local.remove(["history","lastFormData"]),this.showSuccessMessage("History cleared successfully!")}catch(e){this.showErrorMessage("Failed to clear history")}}async exportSettings(){try{const e=await chrome.storage.local.get(null),t=JSON.stringify(e,null,2),n=new Blob([t],{type:"application/json"}),s=URL.createObjectURL(n),a=document.createElement("a");a.href=s,a.download="headforge-settings.json",a.click(),URL.revokeObjectURL(s),this.showSuccessMessage("Settings exported successfully!")}catch(e){this.showErrorMessage("Failed to export settings")}}async importSettings(){const e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async e=>{const t=e.target.files?.[0];if(t)try{const e=await t.text(),n=JSON.parse(e);confirm("Are you sure you want to import these settings? This will overwrite your current settings.")&&(await chrome.storage.local.clear(),await chrome.storage.local.set(n),this.showSuccessMessage("Settings imported successfully!"),location.reload())}catch(e){this.showErrorMessage("Failed to import settings. Please check the file format.")}},e.click()}async resetToDefaults(){confirm("Are you sure you want to reset advanced settings to defaults?")&&(this.settings={...d},this.render(),this.bindEvents(),await this.saveSettings())}async resetAllData(){if(confirm("Are you sure you want to reset ALL data? This will remove all settings, history, and cache. This action cannot be undone.")&&confirm("This is your final warning. All data will be permanently deleted."))try{await chrome.storage.local.clear(),this.showSuccessMessage("All data reset successfully!"),location.reload()}catch(e){this.showErrorMessage("Failed to reset data")}}async uninstallExtension(){if(confirm("Are you sure you want to uninstall the extension? This will remove all data and the extension will be disabled.")&&confirm("This is your final warning. The extension will be uninstalled."))try{await chrome.management.uninstallSelf()}catch(e){this.showErrorMessage("Failed to uninstall extension")}}showSuccessMessage(e){this.showMessage(e,"success")}showErrorMessage(e){this.showMessage(e,"error")}showMessage(e,t){const n=document.createElement("div");n.className=`toast toast-${t}`,n.textContent=e,document.body.appendChild(n),setTimeout(()=>{n.remove()},3e3)}}class g{constructor(){this.userPreferences=this.getDefaultPreferences(),this.hasUnsavedChanges=!1,this.initializeElements(),this.setupEventListeners(),this.initializeSettingsPages(),this.loadUserPreferences(),this.setupTheme()}initializeElements(){this.form=document.querySelector(".options-content"),this.themeToggle=document.getElementById("theme-toggle"),this.saveBtn=document.getElementById("saveSettings"),this.cancelBtn=document.getElementById("cancelSettings"),this.exportBtn=document.getElementById("exportSettings"),this.importBtn=document.getElementById("importSettings"),this.importFile=document.getElementById("importFile"),this.resetBtn=document.getElementById("resetSettings"),this.toastContainer=document.getElementById("toast-container")}initializeSettingsPages(){const e=document.getElementById("general-settings-container"),t=document.getElementById("appearance-settings-container"),n=document.getElementById("templates-settings-container"),s=document.getElementById("advanced-settings-container");e&&(this.generalSettings=new p(e)),t&&(this.appearanceSettings=new u(t)),n&&(this.templatesSettings=new m(n)),s&&(this.advancedSettings=new h(s))}setupEventListeners(){document.querySelectorAll(".options-nav-link").forEach(e=>{e.addEventListener("click",e=>{e.preventDefault();const t=e.target.dataset.tab;t&&this.switchTab(t)})}),this.form.addEventListener("input",()=>{this.hasUnsavedChanges=!0}),this.form.addEventListener("change",()=>{this.hasUnsavedChanges=!0}),this.themeToggle&&this.themeToggle.addEventListener("click",()=>this.toggleTheme()),this.saveBtn&&this.saveBtn.addEventListener("click",()=>this.saveSettings()),this.cancelBtn&&this.cancelBtn.addEventListener("click",()=>this.cancelChanges()),this.exportBtn&&this.exportBtn.addEventListener("click",()=>this.exportSettings()),this.importBtn&&this.importBtn.addEventListener("click",()=>this.importSettings()),this.resetBtn&&this.resetBtn.addEventListener("click",()=>this.resetSettings()),this.importFile&&this.importFile.addEventListener("change",e=>this.handleFileImport(e)),document.addEventListener("keydown",e=>this.handleKeyboardShortcuts(e)),window.addEventListener("beforeunload",e=>{this.hasUnsavedChanges&&(e.preventDefault(),e.returnValue="")})}switchTab(e){document.querySelectorAll(".options-nav-link").forEach(e=>{e.classList.remove("active")});const t=document.querySelector(`[data-tab="${e}"]`);t&&t.classList.add("active"),document.querySelectorAll(".options-section-content").forEach(e=>{e.style.display="none"});const n=document.getElementById(`${e}-tab`);n&&(n.style.display="block")}populateLanguageOptions(){const t=document.getElementById("defaultLanguage"),n=Object.values(e);[...new Set(n.map(e=>e.category))].forEach(e=>{const s=document.createElement("optgroup");s.label=this.capitalizeFirst(e);n.filter(t=>t.category===e).forEach(e=>{const t=document.createElement("option");t.value=e.id,t.textContent=e.name,s.appendChild(t)}),t.appendChild(s)})}setupTheme(){document.body.className=`theme-${this.userPreferences.theme}`;const e=this.themeToggle.querySelector(".theme-icon");"dark"===this.userPreferences.theme?e.innerHTML='\n        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>\n      ':e.innerHTML='\n        <circle cx="12" cy="12" r="5"/>\n        <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>\n      '}toggleTheme(){this.userPreferences.theme="light"===this.userPreferences.theme?"dark":"light",this.setupTheme(),this.hasUnsavedChanges=!0}async loadUserPreferences(){try{const e=await chrome.storage.sync.get(t);e[t]&&(this.userPreferences={...this.userPreferences,...e[t]}),this.populateForm()}catch(e){this.showToast("Failed to load settings","error")}}populateForm(){["defaultLanguage","defaultAuthor","defaultProject","defaultLicense","exportFormat","theme"].forEach(e=>{const t=document.getElementById(e);t&&this.userPreferences[e]&&(t.value=this.userPreferences[e])});["autoFillDates","rememberLastValues","showPreview","enableAnalytics","enableBetaFeatures"].forEach(e=>{const t=document.getElementById(e);t&&(t.checked=this.userPreferences[e])})}getFormData(){return{theme:new FormData(this.form).get("theme")||"light",defaultLanguage:document.getElementById("defaultLanguage").value||i,defaultAuthor:document.getElementById("defaultAuthor").value||n,defaultProject:document.getElementById("defaultProject").value||s,defaultLicense:document.getElementById("defaultLicense").value||a,autoFillDates:document.getElementById("autoFillDates").checked,rememberLastValues:document.getElementById("rememberLastValues").checked,exportFormat:document.getElementById("exportFormat").value||c,showPreview:document.getElementById("showPreview").checked,headerType:document.getElementById("headerType")?.value||"simple",enableAnalytics:document.getElementById("enableAnalytics").checked,enableBetaFeatures:document.getElementById("enableBetaFeatures").checked}}async saveSettings(){try{this.userPreferences=this.getFormData(),await chrome.storage.sync.set({[t]:this.userPreferences}),this.hasUnsavedChanges=!1,this.showToast(l,"success"),this.setupTheme()}catch(e){this.showToast(r,"error")}}cancelChanges(){this.hasUnsavedChanges?confirm("You have unsaved changes. Are you sure you want to cancel?")&&(this.loadUserPreferences(),this.hasUnsavedChanges=!1):window.close()}async exportSettings(){try{const e={version:"1.0.0",timestamp:(new Date).toISOString(),preferences:this.userPreferences},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),s=document.createElement("a");s.href=n,s.download=`headforge-settings-${(new Date).toISOString().split("T")[0]}.json`,s.style.display="none",document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(n),this.showToast("Settings exported successfully","success")}catch(e){this.showToast("Failed to export settings","error")}}importSettings(){this.importFile.click()}async handleFileImport(e){const t=e.target,n=t.files?.[0];if(n)try{const e=await n.text(),t=JSON.parse(e);if(!t.preferences)throw new Error("Invalid settings file format");const s=this.validateImportedSettings(t.preferences);this.userPreferences={...this.userPreferences,...s},this.populateForm(),this.setupTheme(),this.hasUnsavedChanges=!0,this.showToast("Settings imported successfully","success")}catch(e){this.showToast("Failed to import settings. Please check the file format.","error")}finally{t.value=""}}validateImportedSettings(e){const t={};return"string"==typeof e.theme&&["light","dark"].includes(e.theme)&&(t.theme=e.theme),"string"==typeof e.defaultLanguage&&(t.defaultLanguage=e.defaultLanguage),"string"==typeof e.defaultAuthor&&(t.defaultAuthor=e.defaultAuthor),"string"==typeof e.defaultProject&&(t.defaultProject=e.defaultProject),"string"==typeof e.defaultLicense&&(t.defaultLicense=e.defaultLicense),"string"==typeof e.exportFormat&&["clipboard","file","insert"].includes(e.exportFormat)&&(t.exportFormat=e.exportFormat),"boolean"==typeof e.autoFillDates&&(t.autoFillDates=e.autoFillDates),"boolean"==typeof e.rememberLastValues&&(t.rememberLastValues=e.rememberLastValues),"boolean"==typeof e.showPreview&&(t.showPreview=e.showPreview),"boolean"==typeof e.enableAnalytics&&(t.enableAnalytics=e.enableAnalytics),"boolean"==typeof e.enableBetaFeatures&&(t.enableBetaFeatures=e.enableBetaFeatures),t}async resetSettings(){if(confirm("Are you sure you want to reset all settings to their default values? This action cannot be undone."))try{this.userPreferences=this.getDefaultPreferences(),this.populateForm(),this.setupTheme(),this.hasUnsavedChanges=!0,this.showToast("Settings reset to defaults","success")}catch(e){this.showToast("Failed to reset settings","error")}}handleKeyboardShortcuts(e){if(e.ctrlKey||e.metaKey)switch(e.key){case"s":e.preventDefault(),this.saveSettings();break;case"r":e.preventDefault(),this.resetSettings()}}showToast(e,t="info"){const n=document.createElement("div");n.className=`toast ${t}`;const s=this.getToastIcon(t);n.innerHTML=`\n      <svg class="toast-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n        ${s}\n      </svg>\n      <div class="toast-content">\n        <p class="toast-message">${e}</p>\n      </div>\n      <button class="toast-close" onclick="this.parentElement.remove()">\n        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n          <line x1="18" y1="6" x2="6" y2="18"/>\n          <line x1="6" y1="6" x2="18" y2="18"/>\n        </svg>\n      </button>\n    `,this.toastContainer.appendChild(n),setTimeout(()=>{n.parentElement&&n.remove()},5e3)}getToastIcon(e){const t={success:'<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22,4 12,14.01 9,11.01"/>',error:'<circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/>',warning:'<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/>',info:'<circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12.01" y2="8"/>'};return t[e]||t.info}getDefaultPreferences(){return{theme:o,defaultLanguage:i,defaultAuthor:n,defaultProject:s,defaultLicense:a,autoFillDates:!0,rememberLastValues:!0,exportFormat:c,showPreview:!0,headerType:"simple",enableAnalytics:!1,enableBetaFeatures:!1}}capitalizeFirst(e){return e.charAt(0).toUpperCase()+e.slice(1)}}document.addEventListener("DOMContentLoaded",()=>{new g})})();
//# sourceMappingURL=options.js.map