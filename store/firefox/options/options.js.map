{"version":3,"file":"options/options.js","mappings":"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","sources":["webpack://headforge/webpack/runtime/chunk loaded","webpack://headforge/./src/utils/constants.ts","webpack://headforge/./src/options/pages/general.ts","webpack://headforge/./src/options/pages/appearance.ts","webpack://headforge/./src/options/pages/templates.ts","webpack://headforge/./src/options/pages/advanced.ts","webpack://headforge/./src/options/options.ts","webpack://headforge/webpack/bootstrap","webpack://headforge/webpack/runtime/define property getters","webpack://headforge/webpack/runtime/hasOwnProperty shorthand","webpack://headforge/webpack/runtime/jsonp chunk loading","webpack://headforge/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export const EXTENSION_NAME = 'HeadForge';\nexport const EXTENSION_VERSION = '1.0.0';\nexport const EXTENSION_AUTHOR = 'Satoshiba';\n\n// Storage keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'headforge_user_preferences',\n  LAST_HEADER_DATA: 'headforge_last_header_data',\n  TEMPLATE_CUSTOMIZATIONS: 'headforge_template_customizations',\n  EXPORT_HISTORY: 'headforge_export_history',\n  THEME_SETTINGS: 'headforge_theme_settings'\n} as const;\n\n// Default values\nexport const DEFAULT_VALUES = {\n  AUTHOR: 'Satoshiba',\n  PROJECT: 'SYNCLY - YouTube PVR Extension',\n  VERSION: '1.0.0',\n  LICENSE: 'MIT',\n  STATUS: 'Development',\n  PLATFORM: ['Chrome', 'Firefox', 'Edge', 'Brave'],\n  LANGUAGE: 'javascript',\n  THEME: 'light' as const,\n  EXPORT_FORMAT: 'clipboard' as const\n} as const;\n\n// License options\nexport const LICENSE_OPTIONS = [\n  { value: 'MIT', label: 'MIT License' },\n  { value: 'GPL-3.0', label: 'GNU General Public License v3.0' },\n  { value: 'Apache-2.0', label: 'Apache License 2.0' },\n  { value: 'BSD-3-Clause', label: 'BSD 3-Clause License' },\n  { value: 'ISC', label: 'ISC License' },\n  { value: 'Unlicense', label: 'The Unlicense' },\n  { value: 'Custom', label: 'Custom License' }\n] as const;\n\n// Status options\nexport const STATUS_OPTIONS = [\n  { value: 'Development', label: 'Development' },\n  { value: 'Stable', label: 'Stable' },\n  { value: 'Beta', label: 'Beta' },\n  { value: 'Deprecated', label: 'Deprecated' },\n  { value: 'Maintenance', label: 'Maintenance' }\n] as const;\n\n// Platform options\nexport const PLATFORM_OPTIONS = [\n  { value: 'Chrome', label: 'Chrome' },\n  { value: 'Firefox', label: 'Firefox' },\n  { value: 'Edge', label: 'Edge' },\n  { value: 'Brave', label: 'Brave' }\n] as const;\n\n\n// Export format options\nexport const EXPORT_FORMAT_OPTIONS = [\n  { value: 'clipboard', label: 'Copy to Clipboard' },\n  { value: 'file', label: 'Save as File' },\n  { value: 'insert', label: 'Insert into Editor' }\n] as const;\n\n// UI Constants\nexport const UI_CONSTANTS = {\n  POPUP_WIDTH: 400,\n  POPUP_HEIGHT: 600,\n  MAX_PREVIEW_LINES: 20,\n  ANIMATION_DURATION: 300,\n  DEBOUNCE_DELAY: 500\n} as const;\n\n// Validation limits\nexport const VALIDATION_LIMITS = {\n  MAX_FILENAME_LENGTH: 255,\n  MAX_DESCRIPTION_LENGTH: 1000,\n  MAX_USAGE_LENGTH: 2000,\n  MAX_NOTES_LENGTH: 1000,\n  MAX_TODO_LENGTH: 1000,\n  MAX_DEPENDENCIES_LENGTH: 500\n} as const;\n\n// File extensions mapping\nexport const FILE_EXTENSIONS = {\n  javascript: '.js',\n  typescript: '.ts',\n  html: '.html',\n  css: '.css',\n  scss: '.scss',\n  jsx: '.jsx',\n  tsx: '.tsx',\n  vue: '.vue',\n  python: '.py',\n  java: '.java',\n  csharp: '.cs',\n  cpp: '.cpp',\n  c: '.c',\n  go: '.go',\n  rust: '.rs',\n  php: '.php',\n  ruby: '.rb',\n  nodejs: '.js',\n  kotlin: '.kt',\n  swift: '.swift',\n  sql: '.sql',\n  graphql: '.graphql',\n  dockerfile: 'Dockerfile',\n  yaml: '.yml',\n  json: '.json',\n  bash: '.sh',\n  powershell: '.ps1',\n  r: '.r',\n  lua: '.lua',\n  perl: '.pl',\n  haskell: '.hs'\n} as const;\n\n// Message types for communication between components\nexport const MESSAGE_TYPES = {\n  GENERATE_HEADER: 'GENERATE_HEADER',\n  EXPORT_HEADER: 'EXPORT_HEADER',\n  SAVE_PREFERENCES: 'SAVE_PREFERENCES',\n  LOAD_PREFERENCES: 'LOAD_PREFERENCES',\n  UPDATE_THEME: 'UPDATE_THEME',\n  VALIDATE_DATA: 'VALIDATE_DATA',\n  GET_LANGUAGES: 'GET_LANGUAGES',\n  GET_TEMPLATE: 'GET_TEMPLATE'\n} as const;\n\n// Error messages\nexport const ERROR_MESSAGES = {\n  GENERIC_ERROR: 'An unexpected error occurred',\n  VALIDATION_ERROR: 'Please check your input and try again',\n  EXPORT_ERROR: 'Failed to export header',\n  SAVE_ERROR: 'Failed to save preferences',\n  LOAD_ERROR: 'Failed to load preferences',\n  NETWORK_ERROR: 'Network error occurred',\n  PERMISSION_ERROR: 'Permission denied',\n  STORAGE_ERROR: 'Storage error occurred'\n} as const;\n\n// Success messages\nexport const SUCCESS_MESSAGES = {\n  HEADER_GENERATED: 'Header generated successfully',\n  HEADER_COPIED: 'Header copied to clipboard',\n  HEADER_SAVED: 'Header saved successfully',\n  PREFERENCES_SAVED: 'Preferences saved successfully',\n  EXPORT_SUCCESS: 'Export completed successfully'\n} as const;\n\n// CSS class names\nexport const CSS_CLASSES = {\n  THEME_LIGHT: 'theme-light',\n  THEME_DARK: 'theme-dark',\n  // THEME_AUTO removed - only light and dark themes now\n  ANIMATION_FADE_IN: 'fade-in',\n  ANIMATION_SLIDE_UP: 'slide-up',\n  ANIMATION_BOUNCE: 'bounce',\n  LOADING: 'loading',\n  ERROR: 'error',\n  SUCCESS: 'success',\n  WARNING: 'warning'\n} as const;\n\n// Keyboard shortcuts\nexport const KEYBOARD_SHORTCUTS = {\n  GENERATE: 'Ctrl+Enter',\n  COPY: 'Ctrl+C',\n  SAVE: 'Ctrl+S',\n  NEW: 'Ctrl+N',\n  PREVIEW: 'Ctrl+P'\n} as const;\n\n// API endpoints (for future use)\nexport const API_ENDPOINTS = {\n  TEMPLATES: '/api/templates',\n  LANGUAGES: '/api/languages',\n  VALIDATE: '/api/validate',\n  EXPORT: '/api/export'\n} as const;\n\n// Feature flags\nexport const FEATURE_FLAGS = {\n  ENABLE_CLOUD_SYNC: false,\n  ENABLE_TEAM_TEMPLATES: false,\n  ENABLE_ANALYTICS: false,\n  ENABLE_BETA_FEATURES: false\n} as const;\n\n// Default settings\n// Function to detect system theme preference\nconst getSystemTheme = (): 'light' | 'dark' => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n  return 'light'; // fallback\n};\n\nexport const DEFAULT_SETTINGS = {\n  theme: getSystemTheme(),\n  fontSize: 'medium' as const,\n  popupWidth: 400,\n  popupHeight: 600,\n  compactMode: false,\n  showPreview: true,\n  animations: true,\n  highContrast: false,\n  accentColor: '#007bff',\n  debugMode: false,\n  performanceMonitoring: false,\n  cacheSize: 10,\n  maxHistory: 100,\n  autoSave: true,\n  autoSaveDelay: 1000,\n  experimentalFeatures: false,\n  telemetry: false,\n  updateFrequency: 'weekly' as const,\n  backupFrequency: 'monthly' as const,\n  strictValidation: false,\n  timeoutDuration: 5000,\n  maxRetries: 3,\n  defaultLicense: 'MIT',\n  defaultLanguage: 'javascript',\n  exportFormat: 'clipboard' as const,\n  autoFillDates: true,\n  rememberLastValues: true,\n  defaultAuthor: '',\n  defaultProject: '',\n  autoDeactivateDuration: 180000 // 3 minutes in milliseconds\n} as const;\n\n// Default header data\nexport const DEFAULT_HEADER_DATA = {\n  fileName: '',\n  project: '',\n  author: '',\n  creationDate: '',\n  lastUpdated: '',\n  version: '1.0.0',\n  description: '',\n  dependencies: '',\n  license: 'MIT',\n  status: 'Development',\n  language: 'javascript',\n  usage: '',\n  notes: '',\n  todo: '',\n  headerType: 'simple' as const\n} as const;\n\n// Licenses\nexport const LICENSES = [\n  'MIT',\n  'GPL-3.0',\n  'Apache-2.0',\n  'BSD-3-Clause',\n  'ISC',\n  'Unlicense',\n  'Custom'\n] as const;\n\n\n// Platforms\nexport const PLATFORMS = [\n  'Chrome',\n  'Firefox',\n  'Edge',\n  'Brave'\n] as const;\n\n// Export options\nexport const EXPORT_OPTIONS = [\n  'clipboard',\n  'file',\n  'insert'\n] as const;\n","import { UserPreferences } from '@/types';\r\nimport { languageConfigs } from '@/utils/language-configs';\r\nimport { DEFAULT_VALUES, STORAGE_KEYS } from '@/utils/constants';\r\n\r\nexport class GeneralSettings {\r\n  private container: HTMLElement;\r\n  private settings: UserPreferences;\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.settings = this.getDefaultSettings();\r\n    this.render();\r\n    this.setupEventListeners();\r\n    this.loadSettings();\r\n  }\r\n\r\n  private getDefaultSettings(): UserPreferences {\r\n    return {\r\n      theme: DEFAULT_VALUES.THEME,\r\n      defaultLanguage: DEFAULT_VALUES.LANGUAGE,\r\n      defaultAuthor: DEFAULT_VALUES.AUTHOR,\r\n      defaultProject: DEFAULT_VALUES.PROJECT,\r\n      defaultLicense: DEFAULT_VALUES.LICENSE,\r\n      autoFillDates: true,\r\n      rememberLastValues: true,\r\n      exportFormat: DEFAULT_VALUES.EXPORT_FORMAT,\r\n      showPreview: true,\r\n      headerType: 'simple',\r\n      enableAnalytics: false,\r\n      enableBetaFeatures: false\r\n    };\r\n  }\r\n\r\n  private render(): void {\r\n    this.container.innerHTML = `\r\n      <div class=\"settings-grid\">\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-author\">Default Author</label>\r\n          <input type=\"text\" id=\"default-author\" class=\"form-input\" placeholder=\"Your Name\" value=\"${this.settings.defaultAuthor}\">\r\n          <p class=\"setting-description\">Default author name for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-project\">Default Project</label>\r\n          <input type=\"text\" id=\"default-project\" class=\"form-input\" placeholder=\"Project Name\" value=\"${this.settings.defaultProject}\">\r\n          <p class=\"setting-description\">Default project name for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-language\">Default Language</label>\r\n          <select id=\"default-language\" class=\"form-input\">\r\n            ${this.renderLanguageOptions()}\r\n          </select>\r\n          <p class=\"setting-description\">Default programming language for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"default-license\">Default License</label>\r\n          <select id=\"default-license\" class=\"form-input\">\r\n            <option value=\"MIT\" ${this.settings.defaultLicense === 'MIT' ? 'selected' : ''}>MIT</option>\r\n            <option value=\"Apache-2.0\" ${this.settings.defaultLicense === 'Apache-2.0' ? 'selected' : ''}>Apache 2.0</option>\r\n            <option value=\"GPL-3.0\" ${this.settings.defaultLicense === 'GPL-3.0' ? 'selected' : ''}>GPL 3.0</option>\r\n            <option value=\"BSD-3-Clause\" ${this.settings.defaultLicense === 'BSD-3-Clause' ? 'selected' : ''}>BSD 3-Clause</option>\r\n            <option value=\"ISC\" ${this.settings.defaultLicense === 'ISC' ? 'selected' : ''}>ISC</option>\r\n            <option value=\"Unlicense\" ${this.settings.defaultLicense === 'Unlicense' ? 'selected' : ''}>Unlicense</option>\r\n          </select>\r\n          <p class=\"setting-description\">Default license for new headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"export-format\">Export Format</label>\r\n          <select id=\"export-format\" class=\"form-input\">\r\n            <option value=\"clipboard\" ${this.settings.exportFormat === 'clipboard' ? 'selected' : ''}>Copy to Clipboard</option>\r\n            <option value=\"file\" ${this.settings.exportFormat === 'file' ? 'selected' : ''}>Download File</option>\r\n            <option value=\"insert\" ${this.settings.exportFormat === 'insert' ? 'selected' : ''}>Insert into Editor</option>\r\n          </select>\r\n          <p class=\"setting-description\">Default export method for generated headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"auto-fill-dates\" ${this.settings.autoFillDates ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Auto-fill Dates\r\n          </label>\r\n          <p class=\"setting-description\">Automatically fill creation and update dates</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"remember-last-values\" ${this.settings.rememberLastValues ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Remember Last Values\r\n          </label>\r\n          <p class=\"setting-description\">Remember form values between sessions</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"show-preview\" ${this.settings.showPreview ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Show Preview\r\n          </label>\r\n          <p class=\"setting-description\">Show live preview of generated headers</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"enable-analytics\" ${this.settings.enableAnalytics ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Enable Analytics\r\n          </label>\r\n          <p class=\"setting-description\">Help improve HeadForge by sharing anonymous usage data</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"enable-beta-features\" ${this.settings.enableBetaFeatures ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Enable Beta Features\r\n          </label>\r\n          <p class=\"setting-description\">Access experimental features (may be unstable)</p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderLanguageOptions(): string {\r\n    const languageArray = Object.values(languageConfigs);\r\n    const categories = [...new Set(languageArray.map(lang => lang.category))];\r\n    \r\n    let options = '';\r\n    categories.forEach(category => {\r\n      options += `<optgroup label=\"${this.capitalizeFirst(category)}\">`;\r\n      const categoryLanguages = languageArray.filter(lang => lang.category === category);\r\n      categoryLanguages.forEach(language => {\r\n        const selected = this.settings.defaultLanguage === language.id ? 'selected' : '';\r\n        options += `<option value=\"${language.id}\" ${selected}>${language.name}</option>`;\r\n      });\r\n      options += '</optgroup>';\r\n    });\r\n    \r\n    return options;\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Input changes\r\n    this.container.addEventListener('input', (e) => {\r\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\r\n      this.updateSetting(target);\r\n    });\r\n\r\n    this.container.addEventListener('change', (e) => {\r\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\r\n      this.updateSetting(target);\r\n    });\r\n  }\r\n\r\n  private updateSetting(input: HTMLInputElement | HTMLSelectElement): void {\r\n    const id = input.id;\r\n    \r\n    switch (id) {\r\n      case 'default-author':\r\n        this.settings.defaultAuthor = input.value;\r\n        break;\r\n      case 'default-project':\r\n        this.settings.defaultProject = input.value;\r\n        break;\r\n      case 'default-language':\r\n        this.settings.defaultLanguage = input.value;\r\n        break;\r\n      case 'default-license':\r\n        this.settings.defaultLicense = input.value;\r\n        break;\r\n      case 'export-format':\r\n        this.settings.exportFormat = input.value as 'clipboard' | 'file' | 'insert';\r\n        break;\r\n      case 'auto-fill-dates':\r\n        this.settings.autoFillDates = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'remember-last-values':\r\n        this.settings.rememberLastValues = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'show-preview':\r\n        this.settings.showPreview = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'enable-analytics':\r\n        this.settings.enableAnalytics = (input as HTMLInputElement).checked;\r\n        break;\r\n      case 'enable-beta-features':\r\n        this.settings.enableBetaFeatures = (input as HTMLInputElement).checked;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async loadSettings(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(STORAGE_KEYS.USER_PREFERENCES);\r\n      if (result[STORAGE_KEYS.USER_PREFERENCES]) {\r\n        this.settings = { ...this.settings, ...result[STORAGE_KEYS.USER_PREFERENCES] };\r\n        this.updateFormValues();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading general settings:', error);\r\n    }\r\n  }\r\n\r\n  private updateFormValues(): void {\r\n    // Update form with loaded settings\r\n    const inputs = {\r\n      'default-author': this.settings.defaultAuthor,\r\n      'default-project': this.settings.defaultProject,\r\n      'default-language': this.settings.defaultLanguage,\r\n      'default-license': this.settings.defaultLicense,\r\n      'export-format': this.settings.exportFormat\r\n    };\r\n\r\n    Object.entries(inputs).forEach(([id, value]) => {\r\n      const input = this.container.querySelector(`#${id}`) as HTMLInputElement | HTMLSelectElement;\r\n      if (input) {\r\n        input.value = value;\r\n      }\r\n    });\r\n\r\n    const checkboxes = {\r\n      'auto-fill-dates': this.settings.autoFillDates,\r\n      'remember-last-values': this.settings.rememberLastValues,\r\n      'show-preview': this.settings.showPreview,\r\n      'enable-analytics': this.settings.enableAnalytics,\r\n      'enable-beta-features': this.settings.enableBetaFeatures\r\n    };\r\n\r\n    Object.entries(checkboxes).forEach(([id, value]) => {\r\n      const checkbox = this.container.querySelector(`#${id}`) as HTMLInputElement;\r\n      if (checkbox) {\r\n        checkbox.checked = value ?? false;\r\n      }\r\n    });\r\n  }\r\n\r\n  public getSettings(): UserPreferences {\r\n    return { ...this.settings };\r\n  }\r\n\r\n  public setSettings(settings: UserPreferences): void {\r\n    this.settings = { ...settings };\r\n    this.updateFormValues();\r\n  }\r\n\r\n  private capitalizeFirst(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n}","import { ExtensionSettings } from '@/types';\nimport { DEFAULT_SETTINGS } from '@/utils/constants';\n\nexport class AppearanceSettings {\n  private container: HTMLElement;\n  private settings: ExtensionSettings;\n\n  constructor(container: HTMLElement) {\n    this.container = container;\n    this.settings = this.getDefaultSettings();\n    this.render();\n    this.setupEventListeners();\n    this.loadSettings();\n  }\n\n  private getDefaultSettings(): ExtensionSettings {\n    return {\n      ...DEFAULT_SETTINGS,\n      theme: window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n    };\n  }\n\n  private render(): void {\n    this.container.innerHTML = `\n      <div class=\"settings-grid\">\n        <div class=\"setting-group\">\n          <label for=\"theme-select\">Theme</label>\n          <select id=\"theme-select\" class=\"form-input\">\n            <option value=\"light\" ${this.settings.theme === 'light' ? 'selected' : ''}>Light</option>\n            <option value=\"dark\" ${this.settings.theme === 'dark' ? 'selected' : ''}>Dark</option>\n          </select>\n          <p class=\"setting-description\">Choose your preferred theme or let it follow your system preference</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"font-size\">Font Size</label>\n          <select id=\"font-size\" class=\"form-input\">\n            <option value=\"small\" ${this.settings.fontSize === 'small' ? 'selected' : ''}>Small</option>\n            <option value=\"medium\" ${this.settings.fontSize === 'medium' ? 'selected' : ''}>Medium</option>\n            <option value=\"large\" ${this.settings.fontSize === 'large' ? 'selected' : ''}>Large</option>\n          </select>\n          <p class=\"setting-description\">Adjust the font size for better readability</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"popup-width\">Popup Width (px)</label>\n          <input type=\"number\" id=\"popup-width\" class=\"form-input\" min=\"300\" max=\"600\" step=\"10\" value=\"${this.settings.popupWidth}\">\n          <p class=\"setting-description\">Width of the extension popup window</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"popup-height\">Popup Height (px)</label>\n          <input type=\"number\" id=\"popup-height\" class=\"form-input\" min=\"400\" max=\"800\" step=\"10\" value=\"${this.settings.popupHeight}\">\n          <p class=\"setting-description\">Height of the extension popup window</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label for=\"accent-color\">Accent Color</label>\n          <input type=\"color\" id=\"accent-color\" class=\"form-input\" value=\"${this.settings.accentColor}\">\n          <p class=\"setting-description\">Primary color used throughout the interface</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"compact-mode\" ${this.settings.compactMode ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Compact Mode\n          </label>\n          <p class=\"setting-description\">Use a more compact layout with reduced spacing</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"animations\" ${this.settings.animations ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Enable Animations\n          </label>\n          <p class=\"setting-description\">Enable smooth transitions and animations</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"high-contrast\" ${this.settings.highContrast ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            High Contrast\n          </label>\n          <p class=\"setting-description\">Increase contrast for better accessibility</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"debug-mode\" ${this.settings.debugMode ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Debug Mode\n          </label>\n          <p class=\"setting-description\">Show additional debug information and console logs</p>\n        </div>\n\n        <div class=\"setting-group\">\n          <label class=\"form-checkbox\">\n            <input type=\"checkbox\" id=\"performance-monitoring\" ${this.settings.performanceMonitoring ? 'checked' : ''}>\n            <span class=\"checkmark\"></span>\n            Performance Monitoring\n          </label>\n          <p class=\"setting-description\">Monitor and log performance metrics</p>\n        </div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners(): void {\n    // Input changes\n    this.container.addEventListener('input', (e) => {\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\n      this.updateSetting(target);\n    });\n\n    this.container.addEventListener('change', (e) => {\n      const target = e.target as HTMLInputElement | HTMLSelectElement;\n      this.updateSetting(target);\n    });\n  }\n\n  private updateSetting(input: HTMLInputElement | HTMLSelectElement): void {\n    const id = input.id;\n    \n    switch (id) {\n      case 'theme-select':\n        this.settings.theme = input.value as 'light' | 'dark';\n        break;\n      case 'font-size':\n        this.settings.fontSize = input.value as 'small' | 'medium' | 'large';\n        break;\n      case 'popup-width':\n        this.settings.popupWidth = parseInt(input.value);\n        break;\n      case 'popup-height':\n        this.settings.popupHeight = parseInt(input.value);\n        break;\n      case 'accent-color':\n        this.settings.accentColor = input.value;\n        break;\n      case 'compact-mode':\n        this.settings.compactMode = (input as HTMLInputElement).checked;\n        break;\n      case 'animations':\n        this.settings.animations = (input as HTMLInputElement).checked;\n        break;\n      case 'high-contrast':\n        this.settings.highContrast = (input as HTMLInputElement).checked;\n        break;\n      case 'debug-mode':\n        this.settings.debugMode = (input as HTMLInputElement).checked;\n        break;\n      case 'performance-monitoring':\n        this.settings.performanceMonitoring = (input as HTMLInputElement).checked;\n        break;\n    }\n  }\n\n  private async loadSettings(): Promise<void> {\n    try {\n      const result = await chrome.storage.sync.get(['extensionSettings']);\n      if (result.extensionSettings) {\n        this.settings = { ...this.settings, ...result.extensionSettings };\n        this.updateFormValues();\n      }\n    } catch (error) {\n      console.error('Error loading appearance settings:', error);\n    }\n  }\n\n  private updateFormValues(): void {\n    // Update form with loaded settings\n    const inputs = {\n      'theme-select': this.settings.theme,\n      'font-size': this.settings.fontSize,\n      'popup-width': this.settings.popupWidth,\n      'popup-height': this.settings.popupHeight,\n      'accent-color': this.settings.accentColor\n    };\n\n    Object.entries(inputs).forEach(([id, value]) => {\n      const input = this.container.querySelector(`#${id}`) as HTMLInputElement | HTMLSelectElement;\n      if (input) {\n        input.value = value.toString();\n      }\n    });\n\n    const checkboxes = {\n      'compact-mode': this.settings.compactMode,\n      'animations': this.settings.animations,\n      'high-contrast': this.settings.highContrast,\n      'debug-mode': this.settings.debugMode,\n      'performance-monitoring': this.settings.performanceMonitoring\n    };\n\n    Object.entries(checkboxes).forEach(([id, value]) => {\n      const checkbox = this.container.querySelector(`#${id}`) as HTMLInputElement;\n      if (checkbox) {\n        checkbox.checked = value;\n      }\n    });\n  }\n\n  public getSettings(): ExtensionSettings {\n    return { ...this.settings };\n  }\n\n  public setSettings(settings: ExtensionSettings): void {\n    this.settings = { ...settings };\n    this.updateFormValues();\n  }\n}","// import { LanguageConfig } from '@/types';\r\nimport { languageConfigs } from '@/utils/language-configs';\r\n\r\nexport class TemplatesSettings {\r\n  private container: HTMLElement;\r\n  private customTemplates: Map<string, string> = new Map();\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.loadCustomTemplates();\r\n    this.render();\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  private render(): void {\r\n    this.container.innerHTML = `\r\n      <div class=\"templates-settings\">\r\n        <div class=\"setting-group\">\r\n          <h3>Built-in Languages</h3>\r\n          <p class=\"setting-description\">Manage built-in programming language templates</p>\r\n          <div class=\"languages-grid\">\r\n            ${this.renderBuiltInLanguages()}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <h3>Custom Templates</h3>\r\n          <p class=\"setting-description\">Add or modify custom header templates</p>\r\n          <div class=\"custom-templates-container\">\r\n            <div class=\"add-template-section\">\r\n              <input type=\"text\" id=\"new-template-language\" class=\"form-input\" placeholder=\"Language name (e.g., Python, Go)\">\r\n              <button id=\"add-template-btn\" class=\"btn btn-primary\">Add Template</button>\r\n            </div>\r\n            <div id=\"custom-templates-list\" class=\"custom-templates-list\">\r\n              ${this.renderCustomTemplates()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <h3>Template Actions</h3>\r\n          <div class=\"template-actions\">\r\n            <button id=\"export-templates\" class=\"btn btn-secondary\">Export Templates</button>\r\n            <button id=\"import-templates\" class=\"btn btn-secondary\">Import Templates</button>\r\n            <button id=\"reset-templates\" class=\"btn btn-danger\">Reset to Defaults</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private renderBuiltInLanguages(): string {\r\n    const languages = Object.values(languageConfigs);\r\n    const categories = [...new Set(languages.map(lang => lang.category))];\r\n    \r\n    let html = '';\r\n    categories.forEach(category => {\r\n      html += `<div class=\"language-category\">`;\r\n      html += `<h4>${this.capitalizeFirst(category)}</h4>`;\r\n      \r\n      const categoryLanguages = languages.filter(lang => lang.category === category);\r\n      categoryLanguages.forEach(language => {\r\n        html += `\r\n          <div class=\"language-item\" data-language=\"${language.id}\">\r\n            <div class=\"language-info\">\r\n              <strong>${language.name}</strong>\r\n              <span class=\"language-extensions\">${language.extension}</span>\r\n            </div>\r\n            <div class=\"language-actions\">\r\n              <button class=\"btn btn-sm btn-outline edit-template\" data-language=\"${language.id}\">\r\n                Edit\r\n              </button>\r\n              <button class=\"btn btn-sm btn-outline preview-template\" data-language=\"${language.id}\">\r\n                Preview\r\n              </button>\r\n            </div>\r\n          </div>\r\n        `;\r\n      });\r\n      \r\n      html += `</div>`;\r\n    });\r\n    \r\n    return html;\r\n  }\r\n\r\n  private renderCustomTemplates(): string {\r\n    if (this.customTemplates.size === 0) {\r\n      return '<p class=\"no-templates\">No custom templates yet. Add one above!</p>';\r\n    }\r\n\r\n    let html = '';\r\n    this.customTemplates.forEach((template, language) => {\r\n      html += `\r\n        <div class=\"custom-template-item\" data-language=\"${language}\">\r\n          <div class=\"template-header\">\r\n            <strong>${language}</strong>\r\n            <div class=\"template-actions\">\r\n              <button class=\"btn btn-sm btn-outline edit-custom-template\" data-language=\"${language}\">\r\n                Edit\r\n              </button>\r\n              <button class=\"btn btn-sm btn-outline preview-custom-template\" data-language=\"${language}\">\r\n                Preview\r\n              </button>\r\n              <button class=\"btn btn-sm btn-danger delete-custom-template\" data-language=\"${language}\">\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"template-preview\">\r\n            <pre><code>${this.escapeHtml(template.substring(0, 200))}${template.length > 200 ? '...' : ''}</code></pre>\r\n          </div>\r\n        </div>\r\n      `;\r\n    });\r\n\r\n    return html;\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Add template button\r\n    const addBtn = this.container.querySelector('#add-template-btn');\r\n    if (addBtn) {\r\n      addBtn.addEventListener('click', () => this.addCustomTemplate());\r\n    }\r\n\r\n    // Built-in template actions\r\n    this.container.addEventListener('click', (e) => {\r\n      const target = e.target as HTMLElement;\r\n      \r\n      if (target.classList.contains('edit-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.editBuiltInTemplate(language);\r\n      }\r\n      \r\n      if (target.classList.contains('preview-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.previewBuiltInTemplate(language);\r\n      }\r\n\r\n      if (target.classList.contains('edit-custom-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.editCustomTemplate(language);\r\n      }\r\n      \r\n      if (target.classList.contains('preview-custom-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.previewCustomTemplate(language);\r\n      }\r\n\r\n      if (target.classList.contains('delete-custom-template')) {\r\n        const language = target.dataset.language;\r\n        if (language) this.deleteCustomTemplate(language);\r\n      }\r\n    });\r\n\r\n    // Template actions\r\n    const exportBtn = this.container.querySelector('#export-templates');\r\n    const importBtn = this.container.querySelector('#import-templates');\r\n    const resetBtn = this.container.querySelector('#reset-templates');\r\n\r\n    if (exportBtn) exportBtn.addEventListener('click', () => this.exportTemplates());\r\n    if (importBtn) importBtn.addEventListener('click', () => this.importTemplates());\r\n    if (resetBtn) resetBtn.addEventListener('click', () => this.resetTemplates());\r\n  }\r\n\r\n  private addCustomTemplate(): void {\r\n    const languageInput = this.container.querySelector('#new-template-language') as HTMLInputElement;\r\n    const language = languageInput.value.trim();\r\n    \r\n    if (!language) {\r\n      alert('Please enter a language name');\r\n      return;\r\n    }\r\n\r\n    if (this.customTemplates.has(language) || languageConfigs[language]) {\r\n      alert('A template for this language already exists');\r\n      return;\r\n    }\r\n\r\n    const template = this.getDefaultTemplate(language);\r\n    this.customTemplates.set(language, template);\r\n    this.saveCustomTemplates();\r\n    this.render();\r\n    this.setupEventListeners();\r\n    \r\n    languageInput.value = '';\r\n    this.showToast(`Template for ${language} added successfully`, 'success');\r\n  }\r\n\r\n  private editBuiltInTemplate(languageId: string): void {\r\n    const language = languageConfigs[languageId];\r\n    if (!language) return;\r\n\r\n    this.openTemplateEditor(language.name, language.template, languageId, false);\r\n  }\r\n\r\n  private editCustomTemplate(language: string): void {\r\n    const template = this.customTemplates.get(language);\r\n    if (!template) return;\r\n\r\n    this.openTemplateEditor(language, template, language, true);\r\n  }\r\n\r\n  private previewBuiltInTemplate(languageId: string): void {\r\n    const language = languageConfigs[languageId];\r\n    if (!language) return;\r\n\r\n    this.openTemplatePreview(language.name, language.template);\r\n  }\r\n\r\n  private previewCustomTemplate(language: string): void {\r\n    const template = this.customTemplates.get(language);\r\n    if (!template) return;\r\n\r\n    this.openTemplatePreview(language, template);\r\n  }\r\n\r\n  private deleteCustomTemplate(language: string): void {\r\n    if (confirm(`Are you sure you want to delete the template for ${language}?`)) {\r\n      this.customTemplates.delete(language);\r\n      this.saveCustomTemplates();\r\n      this.render();\r\n      this.setupEventListeners();\r\n      this.showToast(`Template for ${language} deleted`, 'info');\r\n    }\r\n  }\r\n\r\n  private openTemplateEditor(languageName: string, template: string, languageId: string, isCustom: boolean): void {\r\n    // Create modal for template editing\r\n    const modal = document.createElement('div');\r\n    modal.className = 'template-editor-modal';\r\n    modal.innerHTML = `\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h3>Edit ${languageName} Template</h3>\r\n          <button class=\"modal-close\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <textarea id=\"template-editor\" class=\"template-textarea\" placeholder=\"Enter your template here...\">${this.escapeHtml(template)}</textarea>\r\n          <div class=\"template-variables\">\r\n            <h4>Available Variables:</h4>\r\n            <ul>\r\n              <li><code>{{fileName}}</code> - File name</li>\r\n              <li><code>{{project}}</code> - Project name</li>\r\n              <li><code>{{author}}</code> - Author name</li>\r\n              <li><code>{{description}}</code> - File description</li>\r\n              <li><code>{{creationDate}}</code> - Creation date</li>\r\n              <li><code>{{lastUpdated}}</code> - Last updated date</li>\r\n              <li><code>{{license}}</code> - License</li>\r\n              <li><code>{{version}}</code> - Version</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button class=\"btn btn-secondary modal-cancel\">Cancel</button>\r\n          <button class=\"btn btn-primary modal-save\">Save Template</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    document.body.appendChild(modal);\r\n\r\n    // Event listeners for modal\r\n    const closeBtn = modal.querySelector('.modal-close');\r\n    const cancelBtn = modal.querySelector('.modal-cancel');\r\n    const saveBtn = modal.querySelector('.modal-save');\r\n\r\n    const closeModal = () => {\r\n      document.body.removeChild(modal);\r\n    };\r\n\r\n    closeBtn?.addEventListener('click', closeModal);\r\n    cancelBtn?.addEventListener('click', closeModal);\r\n    \r\n    saveBtn?.addEventListener('click', () => {\r\n      const textarea = modal.querySelector('#template-editor') as HTMLTextAreaElement;\r\n      const newTemplate = textarea.value;\r\n      \r\n      if (isCustom) {\r\n        this.customTemplates.set(languageId, newTemplate);\r\n        this.saveCustomTemplates();\r\n      } else {\r\n        // For built-in templates, we would need to implement a different approach\r\n        // For now, we'll just show a message\r\n        this.showToast('Built-in templates cannot be modified directly. Consider creating a custom template instead.', 'warning');\r\n      }\r\n      \r\n      closeModal();\r\n      this.render();\r\n      this.setupEventListeners();\r\n    });\r\n\r\n    // Close on backdrop click\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        closeModal();\r\n      }\r\n    });\r\n  }\r\n\r\n  private openTemplatePreview(languageName: string, template: string): void {\r\n    const modal = document.createElement('div');\r\n    modal.className = 'template-preview-modal';\r\n    modal.innerHTML = `\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h3>${languageName} Template Preview</h3>\r\n          <button class=\"modal-close\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <pre><code>${this.escapeHtml(template)}</code></pre>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button class=\"btn btn-primary modal-close\">Close</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    document.body.appendChild(modal);\r\n\r\n    const closeBtn = modal.querySelector('.modal-close');\r\n    closeBtn?.addEventListener('click', () => {\r\n      document.body.removeChild(modal);\r\n    });\r\n\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        document.body.removeChild(modal);\r\n      }\r\n    });\r\n  }\r\n\r\n  private exportTemplates(): void {\r\n    const exportData = {\r\n      customTemplates: Object.fromEntries(this.customTemplates),\r\n      exportDate: new Date().toISOString()\r\n    };\r\n\r\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `headforge-templates-${new Date().toISOString().split('T')[0]}.json`;\r\n    link.style.display = 'none';\r\n    \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    URL.revokeObjectURL(url);\r\n    this.showToast('Templates exported successfully', 'success');\r\n  }\r\n\r\n  private importTemplates(): void {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    \r\n    input.addEventListener('change', (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (!file) return;\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        try {\r\n          const data = JSON.parse(e.target?.result as string);\r\n          if (data.customTemplates) {\r\n            this.customTemplates = new Map(Object.entries(data.customTemplates));\r\n            this.saveCustomTemplates();\r\n            this.render();\r\n            this.setupEventListeners();\r\n            this.showToast('Templates imported successfully', 'success');\r\n          }\r\n        } catch (error) {\r\n          this.showToast('Failed to import templates. Please check the file format.', 'error');\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n    \r\n    input.click();\r\n  }\r\n\r\n  private resetTemplates(): void {\r\n    if (confirm('Are you sure you want to reset all custom templates? This action cannot be undone.')) {\r\n      this.customTemplates.clear();\r\n      this.saveCustomTemplates();\r\n      this.render();\r\n      this.setupEventListeners();\r\n      this.showToast('Custom templates reset successfully', 'info');\r\n    }\r\n  }\r\n\r\n  private getDefaultTemplate(language: string): string {\r\n    return `/**\r\n * @fileoverview ${language} file template\r\n * @author Your Name\r\n * @created ${new Date().toLocaleDateString()}\r\n */\r\n\r\n// Your code here\r\n`;\r\n  }\r\n\r\n  private async loadCustomTemplates(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(['customTemplates']);\r\n      if (result.customTemplates) {\r\n        this.customTemplates = new Map(Object.entries(result.customTemplates));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading custom templates:', error);\r\n    }\r\n  }\r\n\r\n  private async saveCustomTemplates(): Promise<void> {\r\n    try {\r\n      await chrome.storage.sync.set({\r\n        customTemplates: Object.fromEntries(this.customTemplates)\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving custom templates:', error);\r\n    }\r\n  }\r\n\r\n  private escapeHtml(text: string): string {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n\r\n  private capitalizeFirst(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n\r\n  private showToast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info'): void {\r\n    // Simple toast implementation\r\n    const toast = document.createElement('div');\r\n    toast.className = `toast toast-${type}`;\r\n    toast.textContent = message;\r\n    toast.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      padding: 12px 20px;\r\n      border-radius: 4px;\r\n      color: white;\r\n      z-index: 10000;\r\n      font-weight: 500;\r\n    `;\r\n    \r\n    const colors = {\r\n      success: '#10b981',\r\n      error: '#ef4444',\r\n      warning: '#f59e0b',\r\n      info: '#3b82f6'\r\n    };\r\n    \r\n    toast.style.backgroundColor = colors[type];\r\n    \r\n    document.body.appendChild(toast);\r\n    \r\n    setTimeout(() => {\r\n      if (toast.parentElement) {\r\n        document.body.removeChild(toast);\r\n      }\r\n    }, 3000);\r\n  }\r\n}","import { ExtensionSettings } from '../../types';\r\nimport { DEFAULT_SETTINGS } from '../../utils/constants';\r\n\r\nexport class AdvancedSettings {\r\n  private container: HTMLElement;\r\n  private settings: ExtensionSettings;\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.container = container;\r\n    this.settings = { ...DEFAULT_SETTINGS };\r\n    this.initialize();\r\n  }\r\n\r\n  private async initialize(): Promise<void> {\r\n    await this.loadSettings();\r\n    this.render();\r\n    this.bindEvents();\r\n  }\r\n\r\n  private async loadSettings(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.local.get(['extensionSettings']);\r\n      if (result.extensionSettings) {\r\n        this.settings = { ...DEFAULT_SETTINGS, ...result.extensionSettings };\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n    }\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    try {\r\n      await chrome.storage.local.set({ extensionSettings: this.settings });\r\n      this.showSuccessMessage('Settings saved successfully!');\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n      this.showErrorMessage('Failed to save settings');\r\n    }\r\n  }\r\n\r\n  private render(): void {\r\n    this.container.innerHTML = `\r\n      <div class=\"settings-section\">\r\n        <h2>Advanced Settings</h2>\r\n        \r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"debug-mode\" ${this.settings.debugMode ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Debug Mode\r\n          </label>\r\n          <p class=\"setting-description\">Enable debug logging and additional console output.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"performance-monitoring\" ${this.settings.performanceMonitoring ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Performance Monitoring\r\n          </label>\r\n          <p class=\"setting-description\">Monitor and log performance metrics.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"cache-size\">Cache Size (MB)</label>\r\n          <input type=\"number\" id=\"cache-size\" class=\"form-input\" min=\"1\" max=\"100\" value=\"${this.settings.cacheSize}\">\r\n          <p class=\"setting-description\">Maximum cache size for storing generated headers.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"max-history\">Max History Items</label>\r\n          <input type=\"number\" id=\"max-history\" class=\"form-input\" min=\"10\" max=\"1000\" value=\"${this.settings.maxHistory}\">\r\n          <p class=\"setting-description\">Maximum number of history items to keep.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"auto-save\" ${this.settings.autoSave ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Auto Save\r\n          </label>\r\n          <p class=\"setting-description\">Automatically save form data as you type.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"auto-save-delay\">Auto Save Delay (ms)</label>\r\n          <input type=\"number\" id=\"auto-save-delay\" class=\"form-input\" min=\"500\" max=\"10000\" step=\"500\" value=\"${this.settings.autoSaveDelay}\">\r\n          <p class=\"setting-description\">Delay before auto-saving form data.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"experimental-features\" ${this.settings.experimentalFeatures ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Experimental Features\r\n          </label>\r\n          <p class=\"setting-description\">Enable experimental and beta features.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"telemetry\" ${this.settings.telemetry ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Anonymous Usage Analytics\r\n          </label>\r\n          <p class=\"setting-description\">Help improve HeadForge by sharing anonymous usage data.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"update-frequency\">Update Check Frequency</label>\r\n          <select id=\"update-frequency\" class=\"form-select\">\r\n            <option value=\"daily\" ${this.settings.updateFrequency === 'daily' ? 'selected' : ''}>Daily</option>\r\n            <option value=\"weekly\" ${this.settings.updateFrequency === 'weekly' ? 'selected' : ''}>Weekly</option>\r\n            <option value=\"monthly\" ${this.settings.updateFrequency === 'monthly' ? 'selected' : ''}>Monthly</option>\r\n            <option value=\"never\" ${this.settings.updateFrequency === 'never' ? 'selected' : ''}>Never</option>\r\n          </select>\r\n          <p class=\"setting-description\">How often to check for extension updates.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"backup-frequency\">Backup Frequency</label>\r\n          <select id=\"backup-frequency\" class=\"form-select\">\r\n            <option value=\"daily\" ${this.settings.backupFrequency === 'daily' ? 'selected' : ''}>Daily</option>\r\n            <option value=\"weekly\" ${this.settings.backupFrequency === 'weekly' ? 'selected' : ''}>Weekly</option>\r\n            <option value=\"monthly\" ${this.settings.backupFrequency === 'monthly' ? 'selected' : ''}>Monthly</option>\r\n            <option value=\"never\" ${this.settings.backupFrequency === 'never' ? 'selected' : ''}>Never</option>\r\n          </select>\r\n          <p class=\"setting-description\">How often to backup your settings and data.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label class=\"form-checkbox\">\r\n            <input type=\"checkbox\" id=\"strict-validation\" ${this.settings.strictValidation ? 'checked' : ''}>\r\n            <span class=\"checkmark\"></span>\r\n            Strict Validation\r\n          </label>\r\n          <p class=\"setting-description\">Enable strict validation for all form inputs.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"timeout-duration\">Request Timeout (ms)</label>\r\n          <input type=\"number\" id=\"timeout-duration\" class=\"form-input\" min=\"1000\" max=\"30000\" step=\"1000\" value=\"${this.settings.timeoutDuration}\">\r\n          <p class=\"setting-description\">Timeout duration for extension operations.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"max-retries\">Max Retries</label>\r\n          <input type=\"number\" id=\"max-retries\" class=\"form-input\" min=\"0\" max=\"10\" value=\"${this.settings.maxRetries}\">\r\n          <p class=\"setting-description\">Maximum number of retries for failed operations.</p>\r\n        </div>\r\n\r\n        <div class=\"setting-group\">\r\n          <label for=\"auto-deactivate-duration\">Dev Mode Auto-Deactivation (minutes)</label>\r\n          <input type=\"number\" id=\"auto-deactivate-duration\" class=\"form-input\" min=\"1\" max=\"60\" value=\"${this.settings.autoDeactivateDuration / 60000}\">\r\n          <p class=\"setting-description\">How long before Dev Mode automatically deactivates (1-60 minutes).</p>\r\n        </div>\r\n\r\n        <div class=\"setting-actions\">\r\n          <button type=\"button\" id=\"clear-cache\" class=\"btn btn-warning\">Clear Cache</button>\r\n          <button type=\"button\" id=\"clear-history\" class=\"btn btn-warning\">Clear History</button>\r\n          <button type=\"button\" id=\"export-settings\" class=\"btn btn-secondary\">Export Settings</button>\r\n          <button type=\"button\" id=\"import-settings\" class=\"btn btn-secondary\">Import Settings</button>\r\n          <button type=\"button\" id=\"reset-advanced\" class=\"btn btn-danger\">Reset to Defaults</button>\r\n          <button type=\"button\" id=\"save-advanced\" class=\"btn btn-primary\">Save Settings</button>\r\n        </div>\r\n\r\n        <div class=\"danger-zone\">\r\n          <h3>Danger Zone</h3>\r\n          <p>These actions cannot be undone. Please proceed with caution.</p>\r\n          \r\n          <div class=\"setting-actions\">\r\n            <button type=\"button\" id=\"reset-all-data\" class=\"btn btn-danger\">Reset All Data</button>\r\n            <button type=\"button\" id=\"uninstall-extension\" class=\"btn btn-danger\">Uninstall Extension</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private bindEvents(): void {\r\n    // Checkboxes\r\n    const checkboxes = this.container.querySelectorAll('input[type=\"checkbox\"]');\r\n    checkboxes.forEach(checkbox => {\r\n      checkbox.addEventListener('change', (e) => {\r\n        const target = e.target as HTMLInputElement;\r\n        this.updateCheckboxSetting(target);\r\n      });\r\n    });\r\n\r\n    // Number inputs\r\n    const numberInputs = this.container.querySelectorAll('input[type=\"number\"]');\r\n    numberInputs.forEach(input => {\r\n      input.addEventListener('change', (e) => {\r\n        const target = e.target as HTMLInputElement;\r\n        this.updateNumberSetting(target);\r\n      });\r\n    });\r\n\r\n    // Select inputs\r\n    const selectInputs = this.container.querySelectorAll('select');\r\n    selectInputs.forEach(select => {\r\n      select.addEventListener('change', (e) => {\r\n        const target = e.target as HTMLSelectElement;\r\n        this.updateSelectSetting(target);\r\n      });\r\n    });\r\n\r\n    // Action buttons\r\n    this.bindActionButtons();\r\n  }\r\n\r\n  private updateCheckboxSetting(checkbox: HTMLInputElement): void {\r\n    const id = checkbox.id;\r\n    \r\n    switch (id) {\r\n      case 'debug-mode':\r\n        this.settings.debugMode = checkbox.checked;\r\n        break;\r\n      case 'performance-monitoring':\r\n        this.settings.performanceMonitoring = checkbox.checked;\r\n        break;\r\n      case 'auto-save':\r\n        this.settings.autoSave = checkbox.checked;\r\n        break;\r\n      case 'experimental-features':\r\n        this.settings.experimentalFeatures = checkbox.checked;\r\n        break;\r\n      case 'telemetry':\r\n        this.settings.telemetry = checkbox.checked;\r\n        break;\r\n      case 'strict-validation':\r\n        this.settings.strictValidation = checkbox.checked;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private updateNumberSetting(input: HTMLInputElement): void {\r\n    const id = input.id;\r\n    const value = parseInt(input.value);\r\n    \r\n    switch (id) {\r\n      case 'cache-size':\r\n        this.settings.cacheSize = value;\r\n        break;\r\n      case 'max-history':\r\n        this.settings.maxHistory = value;\r\n        break;\r\n      case 'auto-save-delay':\r\n        this.settings.autoSaveDelay = value;\r\n        break;\r\n      case 'timeout-duration':\r\n        this.settings.timeoutDuration = value;\r\n        break;\r\n      case 'max-retries':\r\n        this.settings.maxRetries = value;\r\n        break;\r\n      case 'auto-deactivate-duration':\r\n        this.settings.autoDeactivateDuration = value * 60000; // Convert minutes to milliseconds\r\n        break;\r\n    }\r\n  }\r\n\r\n  private updateSelectSetting(select: HTMLSelectElement): void {\r\n    const id = select.id;\r\n    const value = select.value;\r\n    \r\n    switch (id) {\r\n      case 'update-frequency':\r\n        this.settings.updateFrequency = value as 'daily' | 'weekly' | 'monthly' | 'never';\r\n        break;\r\n      case 'backup-frequency':\r\n        this.settings.backupFrequency = value as 'daily' | 'weekly' | 'monthly' | 'never';\r\n        break;\r\n    }\r\n  }\r\n\r\n  private bindActionButtons(): void {\r\n    // Clear cache\r\n    const clearCacheBtn = this.container.querySelector('#clear-cache') as HTMLButtonElement;\r\n    clearCacheBtn?.addEventListener('click', () => this.clearCache());\r\n\r\n    // Clear history\r\n    const clearHistoryBtn = this.container.querySelector('#clear-history') as HTMLButtonElement;\r\n    clearHistoryBtn?.addEventListener('click', () => this.clearHistory());\r\n\r\n    // Export settings\r\n    const exportBtn = this.container.querySelector('#export-settings') as HTMLButtonElement;\r\n    exportBtn?.addEventListener('click', () => this.exportSettings());\r\n\r\n    // Import settings\r\n    const importBtn = this.container.querySelector('#import-settings') as HTMLButtonElement;\r\n    importBtn?.addEventListener('click', () => this.importSettings());\r\n\r\n    // Reset advanced\r\n    const resetBtn = this.container.querySelector('#reset-advanced') as HTMLButtonElement;\r\n    resetBtn?.addEventListener('click', () => this.resetToDefaults());\r\n\r\n    // Save advanced\r\n    const saveBtn = this.container.querySelector('#save-advanced') as HTMLButtonElement;\r\n    saveBtn?.addEventListener('click', () => this.saveSettings());\r\n\r\n    // Danger zone buttons\r\n    const resetAllBtn = this.container.querySelector('#reset-all-data') as HTMLButtonElement;\r\n    resetAllBtn?.addEventListener('click', () => this.resetAllData());\r\n\r\n    const uninstallBtn = this.container.querySelector('#uninstall-extension') as HTMLButtonElement;\r\n    uninstallBtn?.addEventListener('click', () => this.uninstallExtension());\r\n  }\r\n\r\n  private async clearCache(): Promise<void> {\r\n    if (confirm('Are you sure you want to clear the cache? This will remove all cached data.')) {\r\n      try {\r\n        await chrome.storage.local.remove(['cache', 'generatedHeaders']);\r\n        this.showSuccessMessage('Cache cleared successfully!');\r\n      } catch (error) {\r\n        this.showErrorMessage('Failed to clear cache');\r\n      }\r\n    }\r\n  }\r\n\r\n  private async clearHistory(): Promise<void> {\r\n    if (confirm('Are you sure you want to clear the history? This will remove all history items.')) {\r\n      try {\r\n        await chrome.storage.local.remove(['history', 'lastFormData']);\r\n        this.showSuccessMessage('History cleared successfully!');\r\n      } catch (error) {\r\n        this.showErrorMessage('Failed to clear history');\r\n      }\r\n    }\r\n  }\r\n\r\n  private async exportSettings(): Promise<void> {\r\n    try {\r\n      const settings = await chrome.storage.local.get(null);\r\n      const dataStr = JSON.stringify(settings, null, 2);\r\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n      \r\n      const url = URL.createObjectURL(dataBlob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'headforge-settings.json';\r\n      link.click();\r\n      \r\n      URL.revokeObjectURL(url);\r\n      this.showSuccessMessage('Settings exported successfully!');\r\n    } catch (error) {\r\n      this.showErrorMessage('Failed to export settings');\r\n    }\r\n  }\r\n\r\n  private async importSettings(): Promise<void> {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    \r\n    input.onchange = async (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) {\r\n        try {\r\n          const text = await file.text();\r\n          const settings = JSON.parse(text);\r\n          \r\n          if (confirm('Are you sure you want to import these settings? This will overwrite your current settings.')) {\r\n            await chrome.storage.local.clear();\r\n            await chrome.storage.local.set(settings);\r\n            this.showSuccessMessage('Settings imported successfully!');\r\n            location.reload();\r\n          }\r\n        } catch (error) {\r\n          this.showErrorMessage('Failed to import settings. Please check the file format.');\r\n        }\r\n      }\r\n    };\r\n    \r\n    input.click();\r\n  }\r\n\r\n  private async resetToDefaults(): Promise<void> {\r\n    if (confirm('Are you sure you want to reset advanced settings to defaults?')) {\r\n      this.settings = { ...DEFAULT_SETTINGS };\r\n      this.render();\r\n      this.bindEvents();\r\n      await this.saveSettings();\r\n    }\r\n  }\r\n\r\n  private async resetAllData(): Promise<void> {\r\n    if (confirm('Are you sure you want to reset ALL data? This will remove all settings, history, and cache. This action cannot be undone.')) {\r\n      if (confirm('This is your final warning. All data will be permanently deleted.')) {\r\n        try {\r\n          await chrome.storage.local.clear();\r\n          this.showSuccessMessage('All data reset successfully!');\r\n          location.reload();\r\n        } catch (error) {\r\n          this.showErrorMessage('Failed to reset data');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async uninstallExtension(): Promise<void> {\r\n    if (confirm('Are you sure you want to uninstall the extension? This will remove all data and the extension will be disabled.')) {\r\n      if (confirm('This is your final warning. The extension will be uninstalled.')) {\r\n        try {\r\n          await chrome.management.uninstallSelf();\r\n        } catch (error) {\r\n          this.showErrorMessage('Failed to uninstall extension');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private showSuccessMessage(message: string): void {\r\n    this.showMessage(message, 'success');\r\n  }\r\n\r\n  private showErrorMessage(message: string): void {\r\n    this.showMessage(message, 'error');\r\n  }\r\n\r\n  private showMessage(message: string, type: 'success' | 'error'): void {\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `toast toast-${type}`;\r\n    messageDiv.textContent = message;\r\n    \r\n    document.body.appendChild(messageDiv);\r\n    \r\n    setTimeout(() => {\r\n      messageDiv.remove();\r\n    }, 3000);\r\n  }\r\n}\r\n","import { UserPreferences, Theme } from '@/types';\r\nimport { languageConfigs } from '@/utils/language-configs';\r\nimport { DEFAULT_VALUES, STORAGE_KEYS, SUCCESS_MESSAGES, ERROR_MESSAGES } from '@/utils/constants';\r\n\r\n// Import CSS files\r\nimport '../styles/main.css';\r\nimport './options.css';\r\n\r\nimport { GeneralSettings } from './pages/general';\r\nimport { AppearanceSettings } from './pages/appearance';\r\nimport { TemplatesSettings } from './pages/templates';\r\nimport { AdvancedSettings } from './pages/advanced';\r\n\r\nclass HeadForgeOptions {\r\n  private form!: HTMLFormElement;\r\n  private themeToggle!: HTMLElement;\r\n  private saveBtn!: HTMLElement;\r\n  private cancelBtn!: HTMLElement;\r\n  private exportBtn!: HTMLElement;\r\n  private importBtn!: HTMLElement;\r\n  private importFile!: HTMLInputElement;\r\n  private resetBtn!: HTMLElement;\r\n  private toastContainer!: HTMLElement;\r\n  \r\n  private userPreferences: UserPreferences = this.getDefaultPreferences();\r\n  private hasUnsavedChanges: boolean = false;\r\n  \r\n  // Settings pages\r\n  private generalSettings!: GeneralSettings;\r\n  private appearanceSettings!: AppearanceSettings;\r\n  private templatesSettings!: TemplatesSettings;\r\n  private advancedSettings!: AdvancedSettings;\r\n\r\n  constructor() {\r\n    this.initializeElements();\r\n    this.setupEventListeners();\r\n    this.initializeSettingsPages();\r\n    this.loadUserPreferences();\r\n    this.setupTheme();\r\n  }\r\n\r\n  private initializeElements(): void {\r\n    this.form = document.querySelector('.options-content') as HTMLFormElement;\r\n    this.themeToggle = document.getElementById('theme-toggle') as HTMLElement;\r\n    this.saveBtn = document.getElementById('saveSettings') as HTMLElement;\r\n    this.cancelBtn = document.getElementById('cancelSettings') as HTMLElement;\r\n    this.exportBtn = document.getElementById('exportSettings') as HTMLElement;\r\n    this.importBtn = document.getElementById('importSettings') as HTMLElement;\r\n    this.importFile = document.getElementById('importFile') as HTMLInputElement;\r\n    this.resetBtn = document.getElementById('resetSettings') as HTMLElement;\r\n    this.toastContainer = document.getElementById('toast-container') as HTMLElement;\r\n  }\r\n\r\n  private initializeSettingsPages(): void {\r\n    // Initialize settings pages\r\n    const generalContainer = document.getElementById('general-settings-container');\r\n    const appearanceContainer = document.getElementById('appearance-settings-container');\r\n    const templatesContainer = document.getElementById('templates-settings-container');\r\n    const advancedContainer = document.getElementById('advanced-settings-container');\r\n\r\n    if (generalContainer) {\r\n      this.generalSettings = new GeneralSettings(generalContainer);\r\n    }\r\n    if (appearanceContainer) {\r\n      this.appearanceSettings = new AppearanceSettings(appearanceContainer);\r\n    }\r\n    if (templatesContainer) {\r\n      this.templatesSettings = new TemplatesSettings(templatesContainer);\r\n    }\r\n    if (advancedContainer) {\r\n      this.advancedSettings = new AdvancedSettings(advancedContainer);\r\n    }\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Tab navigation\r\n    document.querySelectorAll('.options-nav-link').forEach(link => {\r\n      link.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        const tab = (e.target as HTMLElement).dataset.tab;\r\n        if (tab) {\r\n          this.switchTab(tab);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Form input events\r\n    this.form.addEventListener('input', () => {\r\n      this.hasUnsavedChanges = true;\r\n    });\r\n\r\n    this.form.addEventListener('change', () => {\r\n      this.hasUnsavedChanges = true;\r\n    });\r\n\r\n    // Theme toggle\r\n    if (this.themeToggle) {\r\n      this.themeToggle.addEventListener('click', () => this.toggleTheme());\r\n    }\r\n\r\n    // Button events\r\n    if (this.saveBtn) this.saveBtn.addEventListener('click', () => this.saveSettings());\r\n    if (this.cancelBtn) this.cancelBtn.addEventListener('click', () => this.cancelChanges());\r\n    if (this.exportBtn) this.exportBtn.addEventListener('click', () => this.exportSettings());\r\n    if (this.importBtn) this.importBtn.addEventListener('click', () => this.importSettings());\r\n    if (this.resetBtn) this.resetBtn.addEventListener('click', () => this.resetSettings());\r\n\r\n    // File import\r\n    if (this.importFile) {\r\n      this.importFile.addEventListener('change', (e) => this.handleFileImport(e));\r\n    }\r\n\r\n    // Keyboard shortcuts\r\n    document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));\r\n\r\n    // Before unload warning\r\n    window.addEventListener('beforeunload', (e) => {\r\n      if (this.hasUnsavedChanges) {\r\n        e.preventDefault();\r\n        e.returnValue = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  private switchTab(tabName: string): void {\r\n    // Update nav links\r\n    document.querySelectorAll('.options-nav-link').forEach(link => {\r\n      link.classList.remove('active');\r\n    });\r\n    const activeLink = document.querySelector(`[data-tab=\"${tabName}\"]`);\r\n    if (activeLink) {\r\n      activeLink.classList.add('active');\r\n    }\r\n\r\n    // Update tab content\r\n    document.querySelectorAll('.options-section-content').forEach(content => {\r\n      (content as HTMLElement).style.display = 'none';\r\n    });\r\n    const activeTab = document.getElementById(`${tabName}-tab`);\r\n    if (activeTab) {\r\n      activeTab.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  private populateLanguageOptions(): void {\r\n    const languageSelect = document.getElementById('defaultLanguage') as HTMLSelectElement;\r\n    \r\n    // Group languages by category\r\n    const languageArray = Object.values(languageConfigs);\r\n    const categories = [...new Set(languageArray.map(lang => lang.category))];\r\n    \r\n    categories.forEach(category => {\r\n      const optgroup = document.createElement('optgroup');\r\n      optgroup.label = this.capitalizeFirst(category);\r\n      \r\n      const categoryLanguages = languageArray.filter(lang => lang.category === category);\r\n      categoryLanguages.forEach(language => {\r\n        const option = document.createElement('option');\r\n        option.value = language.id;\r\n        option.textContent = language.name;\r\n        optgroup.appendChild(option);\r\n      });\r\n      \r\n      languageSelect.appendChild(optgroup);\r\n    });\r\n  }\r\n\r\n  private setupTheme(): void {\r\n    const body = document.body;\r\n    body.className = `theme-${this.userPreferences.theme}`;\r\n    \r\n    // Update theme toggle icon\r\n    const themeIcon = this.themeToggle.querySelector('.theme-icon') as SVGElement;\r\n    if (this.userPreferences.theme === 'dark') {\r\n      themeIcon.innerHTML = `\r\n        <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"/>\r\n      `;\r\n    } else {\r\n      themeIcon.innerHTML = `\r\n        <circle cx=\"12\" cy=\"12\" r=\"5\"/>\r\n        <path d=\"M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42\"/>\r\n      `;\r\n    }\r\n  }\r\n\r\n  private toggleTheme(): void {\r\n    // Toggle between light and dark themes only\r\n    this.userPreferences.theme = this.userPreferences.theme === 'light' ? 'dark' : 'light';\r\n    this.setupTheme();\r\n    this.hasUnsavedChanges = true;\r\n  }\r\n\r\n  private async loadUserPreferences(): Promise<void> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(STORAGE_KEYS.USER_PREFERENCES);\r\n      if (result[STORAGE_KEYS.USER_PREFERENCES]) {\r\n        this.userPreferences = { ...this.userPreferences, ...result[STORAGE_KEYS.USER_PREFERENCES] };\r\n      }\r\n      this.populateForm();\r\n    } catch (error) {\r\n      console.error('Error loading user preferences:', error);\r\n      this.showToast('Failed to load settings', 'error');\r\n    }\r\n  }\r\n\r\n  private populateForm(): void {\r\n    // Populate form fields with current preferences\r\n    const fields = [\r\n      'defaultLanguage',\r\n      'defaultAuthor',\r\n      'defaultProject',\r\n      'defaultLicense',\r\n      'exportFormat',\r\n      'theme'\r\n    ];\r\n\r\n    fields.forEach(field => {\r\n      const element = document.getElementById(field) as HTMLInputElement | HTMLSelectElement;\r\n      if (element && this.userPreferences[field as keyof UserPreferences]) {\r\n        element.value = this.userPreferences[field as keyof UserPreferences] as string;\r\n      }\r\n    });\r\n\r\n    // Handle checkboxes\r\n    const checkboxes = [\r\n      'autoFillDates',\r\n      'rememberLastValues',\r\n      'showPreview',\r\n      'enableAnalytics',\r\n      'enableBetaFeatures'\r\n    ];\r\n\r\n    checkboxes.forEach(checkbox => {\r\n      const element = document.getElementById(checkbox) as HTMLInputElement;\r\n      if (element) {\r\n        element.checked = this.userPreferences[checkbox as keyof UserPreferences] as boolean;\r\n      }\r\n    });\r\n  }\r\n\r\n  private getFormData(): UserPreferences {\r\n    const formData = new FormData(this.form);\r\n    \r\n    return {\r\n      theme: formData.get('theme') as Theme || 'light',\r\n      defaultLanguage: (document.getElementById('defaultLanguage') as HTMLSelectElement).value || DEFAULT_VALUES.LANGUAGE,\r\n      defaultAuthor: (document.getElementById('defaultAuthor') as HTMLInputElement).value || DEFAULT_VALUES.AUTHOR,\r\n      defaultProject: (document.getElementById('defaultProject') as HTMLInputElement).value || DEFAULT_VALUES.PROJECT,\r\n      defaultLicense: (document.getElementById('defaultLicense') as HTMLSelectElement).value || DEFAULT_VALUES.LICENSE,\r\n      autoFillDates: (document.getElementById('autoFillDates') as HTMLInputElement).checked,\r\n      rememberLastValues: (document.getElementById('rememberLastValues') as HTMLInputElement).checked,\r\n      exportFormat: (document.getElementById('exportFormat') as HTMLSelectElement).value as 'clipboard' | 'file' | 'insert' || DEFAULT_VALUES.EXPORT_FORMAT,\r\n      showPreview: (document.getElementById('showPreview') as HTMLInputElement).checked,\r\n      headerType: (document.getElementById('headerType') as HTMLSelectElement)?.value as 'simple' | 'complete' || 'simple',\r\n      enableAnalytics: (document.getElementById('enableAnalytics') as HTMLInputElement).checked,\r\n      enableBetaFeatures: (document.getElementById('enableBetaFeatures') as HTMLInputElement).checked\r\n    };\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    try {\r\n      this.userPreferences = this.getFormData();\r\n      \r\n      await chrome.storage.sync.set({\r\n        [STORAGE_KEYS.USER_PREFERENCES]: this.userPreferences\r\n      });\r\n\r\n      this.hasUnsavedChanges = false;\r\n      this.showToast(SUCCESS_MESSAGES.PREFERENCES_SAVED, 'success');\r\n      \r\n      // Update theme immediately\r\n      this.setupTheme();\r\n      \r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n      this.showToast(ERROR_MESSAGES.SAVE_ERROR, 'error');\r\n    }\r\n  }\r\n\r\n  private cancelChanges(): void {\r\n    if (this.hasUnsavedChanges) {\r\n      if (confirm('You have unsaved changes. Are you sure you want to cancel?')) {\r\n        this.loadUserPreferences();\r\n        this.hasUnsavedChanges = false;\r\n      }\r\n    } else {\r\n      window.close();\r\n    }\r\n  }\r\n\r\n  private async exportSettings(): Promise<void> {\r\n    try {\r\n      const settings = {\r\n        version: '1.0.0',\r\n        timestamp: new Date().toISOString(),\r\n        preferences: this.userPreferences\r\n      };\r\n\r\n      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `headforge-settings-${new Date().toISOString().split('T')[0]}.json`;\r\n      link.style.display = 'none';\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n      URL.revokeObjectURL(url);\r\n      \r\n      this.showToast('Settings exported successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error exporting settings:', error);\r\n      this.showToast('Failed to export settings', 'error');\r\n    }\r\n  }\r\n\r\n  private importSettings(): void {\r\n    this.importFile.click();\r\n  }\r\n\r\n  private async handleFileImport(event: Event): Promise<void> {\r\n    const target = event.target as HTMLInputElement;\r\n    const file = target.files?.[0];\r\n    \r\n    if (!file) return;\r\n\r\n    try {\r\n      const text = await file.text();\r\n      const settings = JSON.parse(text);\r\n      \r\n      if (!settings.preferences) {\r\n        throw new Error('Invalid settings file format');\r\n      }\r\n\r\n      // Validate settings structure\r\n      const validPreferences = this.validateImportedSettings(settings.preferences);\r\n      \r\n      this.userPreferences = { ...this.userPreferences, ...validPreferences };\r\n      this.populateForm();\r\n      this.setupTheme();\r\n      this.hasUnsavedChanges = true;\r\n      \r\n      this.showToast('Settings imported successfully', 'success');\r\n    } catch (error) {\r\n      console.error('Error importing settings:', error);\r\n      this.showToast('Failed to import settings. Please check the file format.', 'error');\r\n    } finally {\r\n      // Reset file input\r\n      target.value = '';\r\n    }\r\n  }\r\n\r\n  private validateImportedSettings(settings: any): Partial<UserPreferences> {\r\n    const validSettings: Partial<UserPreferences> = {};\r\n    \r\n    // Validate each setting\r\n    if (typeof settings.theme === 'string' && ['light', 'dark'].includes(settings.theme)) {\r\n      validSettings.theme = settings.theme;\r\n    }\r\n    \r\n    if (typeof settings.defaultLanguage === 'string') {\r\n      validSettings.defaultLanguage = settings.defaultLanguage;\r\n    }\r\n    \r\n    if (typeof settings.defaultAuthor === 'string') {\r\n      validSettings.defaultAuthor = settings.defaultAuthor;\r\n    }\r\n    \r\n    if (typeof settings.defaultProject === 'string') {\r\n      validSettings.defaultProject = settings.defaultProject;\r\n    }\r\n    \r\n    if (typeof settings.defaultLicense === 'string') {\r\n      validSettings.defaultLicense = settings.defaultLicense;\r\n    }\r\n    \r\n    if (typeof settings.exportFormat === 'string' && ['clipboard', 'file', 'insert'].includes(settings.exportFormat)) {\r\n      validSettings.exportFormat = settings.exportFormat;\r\n    }\r\n    \r\n    if (typeof settings.autoFillDates === 'boolean') {\r\n      validSettings.autoFillDates = settings.autoFillDates;\r\n    }\r\n    \r\n    if (typeof settings.rememberLastValues === 'boolean') {\r\n      validSettings.rememberLastValues = settings.rememberLastValues;\r\n    }\r\n    \r\n    if (typeof settings.showPreview === 'boolean') {\r\n      validSettings.showPreview = settings.showPreview;\r\n    }\r\n    \r\n    if (typeof settings.enableAnalytics === 'boolean') {\r\n      validSettings.enableAnalytics = settings.enableAnalytics;\r\n    }\r\n    \r\n    if (typeof settings.enableBetaFeatures === 'boolean') {\r\n      validSettings.enableBetaFeatures = settings.enableBetaFeatures;\r\n    }\r\n    \r\n    return validSettings;\r\n  }\r\n\r\n  private async resetSettings(): Promise<void> {\r\n    if (confirm('Are you sure you want to reset all settings to their default values? This action cannot be undone.')) {\r\n      try {\r\n        this.userPreferences = this.getDefaultPreferences();\r\n        this.populateForm();\r\n        this.setupTheme();\r\n        this.hasUnsavedChanges = true;\r\n        \r\n        this.showToast('Settings reset to defaults', 'success');\r\n      } catch (error) {\r\n        console.error('Error resetting settings:', error);\r\n        this.showToast('Failed to reset settings', 'error');\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleKeyboardShortcuts(e: KeyboardEvent): void {\r\n    if (e.ctrlKey || e.metaKey) {\r\n      switch (e.key) {\r\n        case 's':\r\n          e.preventDefault();\r\n          this.saveSettings();\r\n          break;\r\n        case 'r':\r\n          e.preventDefault();\r\n          this.resetSettings();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private showToast(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info'): void {\r\n    const toast = document.createElement('div');\r\n    toast.className = `toast ${type}`;\r\n    \r\n    const icon = this.getToastIcon(type);\r\n    toast.innerHTML = `\r\n      <svg class=\"toast-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n        ${icon}\r\n      </svg>\r\n      <div class=\"toast-content\">\r\n        <p class=\"toast-message\">${message}</p>\r\n      </div>\r\n      <button class=\"toast-close\" onclick=\"this.parentElement.remove()\">\r\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n        </svg>\r\n      </button>\r\n    `;\r\n    \r\n    this.toastContainer.appendChild(toast);\r\n    \r\n    // Auto-remove after 5 seconds\r\n    setTimeout(() => {\r\n      if (toast.parentElement) {\r\n        toast.remove();\r\n      }\r\n    }, 5000);\r\n  }\r\n\r\n  private getToastIcon(type: string): string {\r\n    const icons = {\r\n      success: '<path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"/><polyline points=\"22,4 12,14.01 9,11.01\"/>',\r\n      error: '<circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/>',\r\n      warning: '<path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"/><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"/><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"/>',\r\n      info: '<circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"/><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"/>'\r\n    };\r\n    return icons[type as keyof typeof icons] || icons.info;\r\n  }\r\n\r\n  private getDefaultPreferences(): UserPreferences {\r\n    return {\r\n      theme: DEFAULT_VALUES.THEME,\r\n      defaultLanguage: DEFAULT_VALUES.LANGUAGE,\r\n      defaultAuthor: DEFAULT_VALUES.AUTHOR,\r\n      defaultProject: DEFAULT_VALUES.PROJECT,\r\n      defaultLicense: DEFAULT_VALUES.LICENSE,\r\n      autoFillDates: true,\r\n      rememberLastValues: true,\r\n      exportFormat: DEFAULT_VALUES.EXPORT_FORMAT,\r\n      showPreview: true,\r\n      headerType: 'simple',\r\n      enableAnalytics: false,\r\n      enableBetaFeatures: false\r\n    };\r\n  }\r\n\r\n  private capitalizeFirst(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n}\r\n\r\n// Initialize the options page when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new HeadForgeOptions();\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t575: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkheadforge\"] = self[\"webpackChunkheadforge\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [76], () => (__webpack_require__(660)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","STORAGE_KEYS","USER_PREFERENCES","LAST_HEADER_DATA","TEMPLATE_CUSTOMIZATIONS","EXPORT_HISTORY","THEME_SETTINGS","DEFAULT_VALUES","AUTHOR","PROJECT","VERSION","LICENSE","STATUS","PLATFORM","LANGUAGE","THEME","EXPORT_FORMAT","ERROR_MESSAGES","GENERIC_ERROR","VALIDATION_ERROR","EXPORT_ERROR","SAVE_ERROR","LOAD_ERROR","NETWORK_ERROR","PERMISSION_ERROR","STORAGE_ERROR","SUCCESS_MESSAGES","HEADER_GENERATED","HEADER_COPIED","HEADER_SAVED","PREFERENCES_SAVED","EXPORT_SUCCESS","DEFAULT_SETTINGS","theme","window","matchMedia","matches","fontSize","popupWidth","popupHeight","compactMode","showPreview","animations","highContrast","accentColor","debugMode","performanceMonitoring","cacheSize","maxHistory","autoSave","autoSaveDelay","experimentalFeatures","telemetry","updateFrequency","backupFrequency","strictValidation","timeoutDuration","maxRetries","defaultLicense","defaultLanguage","exportFormat","autoFillDates","rememberLastValues","defaultAuthor","defaultProject","autoDeactivateDuration","GeneralSettings","constructor","container","this","settings","getDefaultSettings","render","setupEventListeners","loadSettings","headerType","enableAnalytics","enableBetaFeatures","innerHTML","renderLanguageOptions","languageArray","Object","values","languageConfigs","categories","Set","map","lang","category","options","forEach","capitalizeFirst","filter","language","selected","id","name","addEventListener","e","target","updateSetting","input","value","checked","result","chrome","storage","sync","get","updateFormValues","error","inputs","entries","querySelector","checkboxes","checkbox","getSettings","setSettings","str","charAt","toUpperCase","slice","AppearanceSettings","parseInt","extensionSettings","toString","TemplatesSettings","customTemplates","Map","loadCustomTemplates","renderBuiltInLanguages","renderCustomTemplates","languages","html","extension","size","template","escapeHtml","substring","length","addBtn","addCustomTemplate","classList","contains","dataset","editBuiltInTemplate","previewBuiltInTemplate","editCustomTemplate","previewCustomTemplate","deleteCustomTemplate","exportBtn","importBtn","resetBtn","exportTemplates","importTemplates","resetTemplates","languageInput","trim","alert","has","getDefaultTemplate","set","saveCustomTemplates","showToast","languageId","openTemplateEditor","openTemplatePreview","confirm","delete","languageName","isCustom","modal","document","createElement","className","body","appendChild","closeBtn","cancelBtn","saveBtn","closeModal","removeChild","newTemplate","exportData","fromEntries","exportDate","Date","toISOString","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","link","href","download","split","style","display","click","revokeObjectURL","accept","file","files","reader","FileReader","onload","data","parse","readAsText","clear","toLocaleDateString","text","div","textContent","message","toast","cssText","backgroundColor","success","warning","info","setTimeout","parentElement","AdvancedSettings","initialize","bindEvents","local","saveSettings","showSuccessMessage","showErrorMessage","querySelectorAll","updateCheckboxSetting","updateNumberSetting","select","updateSelectSetting","bindActionButtons","clearCacheBtn","clearCache","clearHistoryBtn","clearHistory","exportSettings","importSettings","resetToDefaults","resetAllBtn","resetAllData","uninstallBtn","uninstallExtension","remove","dataStr","dataBlob","onchange","async","location","reload","management","uninstallSelf","showMessage","messageDiv","HeadForgeOptions","userPreferences","getDefaultPreferences","hasUnsavedChanges","initializeElements","initializeSettingsPages","loadUserPreferences","setupTheme","form","themeToggle","getElementById","importFile","toastContainer","generalContainer","appearanceContainer","templatesContainer","advancedContainer","generalSettings","appearanceSettings","templatesSettings","advancedSettings","preventDefault","tab","switchTab","toggleTheme","cancelChanges","resetSettings","handleFileImport","handleKeyboardShortcuts","returnValue","tabName","activeLink","add","content","activeTab","populateLanguageOptions","languageSelect","optgroup","label","option","themeIcon","populateForm","field","element","getFormData","FormData","close","version","timestamp","preferences","event","Error","validPreferences","validateImportedSettings","validSettings","includes","ctrlKey","metaKey","key","icon","getToastIcon","icons","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","every","splice","r","d","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}